(()=>{"use strict";var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={exports:{}};return __webpack_modules__[r](o,o.exports,t),o.exports}const r={};let o,n,i,s;r.version="0.4.1",r.parse=function(e,t){return n=String(e),i=n.length,c(t),We(),function(e){_=R=l,o.locations&&(O=new Je),m=P=null,N=[],$e();const t=e||lt();let r=!0;for(e||(t.body=[]);y!==k;){const e=Ot();t.body.push(e),r&&ft(e)&&at(!0),r=!1}return ht(t,"Program")}(o.program)};const a=r.defaultOptions={ecmaVersion:5,strictSemicolons:!1,allowTrailingCommas:!0,forbidReserved:!1,locations:!1,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null};function c(e){o=e||{};for(let e in a)Object.prototype.hasOwnProperty.call(o,e)||(o[e]=a[e]);s=o.sourceFile||null}const p=r.getLineInfo=function(e,t){for(var r=1,o=0;;){Ye.lastIndex=o;const n=Ye.exec(e);if(!(n&&n.index<t))break;++r,o=n.index+n[0].length}return{line:r,column:t-o}};var l,u,h,f,d,y,E,v,g,b;let _,R,O,m,N,P;function T(e,t){const r=p(n,e);t+=" ("+r.line+":"+r.column+")";const o=new SyntaxError(t);throw o.pos=e,o.loc=r,o.raisedAt=l,o}r.tokenize=function(e,t){n=String(e),i=n.length,c(t),We();const r={};function s(e){return $e(e),r.start=u,r.end=h,r.startLoc=f,r.endLoc=d,r.type=y,r.value=E,r}return s.jumpTo=function(e,t){if(l=e,o.locations){let t;for(g=1,b=Ye.lastIndex=0;(t=Ye.exec(n))&&t.index<e;)++g,b=t.index+t[0].length}v=t,Ke()},s};const S=[],w={type:"num"},C={type:"regexp"},x={type:"string"},A={type:"name"},k={type:"eof"},j={keyword:"break"},I={keyword:"case",beforeExpr:!0},F={keyword:"catch"},U={keyword:"continue"},L={keyword:"debugger"},D={keyword:"default"},B={keyword:"do",isLoop:!0},M={keyword:"else",beforeExpr:!0},G={keyword:"finally"},Y={keyword:"for",isLoop:!0},V={keyword:"function"},X={keyword:"if"},J={keyword:"return",beforeExpr:!0},W={keyword:"switch"},q={keyword:"throw",beforeExpr:!0},H={keyword:"try"},z={keyword:"var"},K={keyword:"while",isLoop:!0},$={keyword:"with"},Q={keyword:"new",beforeExpr:!0},Z={keyword:"this"},ee={keyword:"null",atomValue:null},te={keyword:"true",atomValue:!0},re={keyword:"false",atomValue:!1},oe={keyword:"in",binop:7,beforeExpr:!0},ne={break:j,case:I,catch:F,continue:U,debugger:L,default:D,do:B,else:M,finally:G,for:Y,function:V,if:X,return:J,switch:W,throw:q,try:H,var:z,while:K,with:$,null:ee,true:te,false:re,new:Q,in:oe,instanceof:{keyword:"instanceof",binop:7,beforeExpr:!0},this:Z,typeof:{keyword:"typeof",prefix:!0,beforeExpr:!0},void:{keyword:"void",prefix:!0,beforeExpr:!0},delete:{keyword:"delete",prefix:!0,beforeExpr:!0}},ie={type:"[",beforeExpr:!0},se={type:"]"},ae={type:"{",beforeExpr:!0},ce={type:"}"},pe={type:"(",beforeExpr:!0},le={type:")"},ue={type:",",beforeExpr:!0},he={type:";",beforeExpr:!0},fe={type:":",beforeExpr:!0},de={type:"."},ye={type:"?",beforeExpr:!0},Ee={binop:10,beforeExpr:!0},ve={isAssign:!0,beforeExpr:!0},ge={isAssign:!0,beforeExpr:!0},be={postfix:!0,prefix:!0,isUpdate:!0},_e={prefix:!0,beforeExpr:!0},Re={binop:1,beforeExpr:!0},Oe={binop:2,beforeExpr:!0},me={binop:3,beforeExpr:!0},Ne={binop:4,beforeExpr:!0},Pe={binop:5,beforeExpr:!0},Te={binop:6,beforeExpr:!0},Se={binop:7,beforeExpr:!0},we={binop:8,beforeExpr:!0},Ce={binop:9,prefix:!0,beforeExpr:!0},xe={binop:10,beforeExpr:!0};r.tokTypes={bracketL:ie,bracketR:se,braceL:ae,braceR:ce,parenL:pe,parenR:le,comma:ue,semi:he,colon:fe,dot:de,question:ye,slash:Ee,eq:ve,name:A,eof:k,num:w,regexp:C,string:x};for(let e in ne)r.tokTypes["_"+e]=ne[e];function Ae(e){e=e.split(" ");let t="";const r=[];e:for(var o=0;o<e.length;++o){for(let t=0;t<r.length;++t)if(r[t][0].length==e[o].length){r[t].push(e[o]);continue e}r.push([e[o]])}function n(e){if(1==e.length)return t+="return str === "+JSON.stringify(e[0])+";";t+="switch(str){";for(let r=0;r<e.length;++r)t+="case "+JSON.stringify(e[r])+":";t+="return true}return false;"}if(r.length>3){for(r.sort((function(e,t){return t.length-e.length})),t+="switch(str.length){",o=0;o<r.length;++o){const e=r[o];t+="case "+e[0].length+":",n(e)}t+="}"}else n(e);return new Function("str",t)}const ke=Ae("abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile"),je=Ae("class enum extends super const export import"),Ie=Ae("implements interface let package private protected public static yield"),Fe=Ae("eval arguments"),Ue=Ae("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this"),Le=/[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/,De="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",Be=new RegExp("["+De+"]"),Me=new RegExp("["+De+"̀-ͯ҃-֑҇-ׇֽֿׁׂׅׄؐ-ؚؠ-ىٲ-ۓۧ-ۨۻ-ۼܰ-݊ࠀ-ࠔࠛ-ࠣࠥ-ࠧࠩ-࠭ࡀ-ࡗࣤ-ࣾऀ-ःऺ-़ा-ॏ॑-ॗॢ-ॣ०-९ঁ-ঃ়া-ৄেৈৗয়-ৠਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢ-ૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୟ-ୠ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఁ-ఃె-ైొ-్ౕౖౢ-ౣ౦-౯ಂಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢ-ೣ೦-೯ംഃെ-ൈൗൢ-ൣ൦-൯ංඃ්ා-ුූෘ-ෟෲෳิ-ฺเ-ๅ๐-๙ິ-ູ່-ໍ໐-໙༘༙༠-༩༹༵༷ཁ-ཇཱ-྄྆-྇ྍ-ྗྙ-ྼ࿆က-ဩ၀-၉ၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟ᜎ-ᜐᜠ-ᜰᝀ-ᝐᝲᝳក-ឲ៝០-៩᠋-᠍᠐-᠙ᤠ-ᤫᤰ-᤻ᥑ-ᥭᦰ-ᧀᧈ-ᧉ᧐-᧙ᨀ-ᨕᨠ-ᩓ᩠-᩿᩼-᪉᪐-᪙ᭆ-ᭋ᭐-᭙᭫-᭳᮰-᮹᯦-᯳ᰀ-ᰢ᱀-᱉ᱛ-ᱽ᳐-᳒ᴀ-ᶾḁ-ἕ‌‍‿⁀⁔⃐-⃥⃜⃡-⃰ⶁ-ⶖⷠ-ⷿ〡-〨゙゚Ꙁ-ꙭꙴ-꙽ꚟ꛰-꛱ꟸ-ꠀ꠆ꠋꠣ-ꠧꢀ-ꢁꢴ-꣄꣐-꣙ꣳ-ꣷ꤀-꤉ꤦ-꤭ꤰ-ꥅꦀ-ꦃ꦳-꧀ꨀ-ꨧꩀ-ꩁꩌ-ꩍ꩐-꩙ꩻꫠ-ꫩꫲ-ꫳꯀ-ꯡ꯬꯭꯰-꯹ﬠ-ﬨ︀-️︠-︦︳︴﹍-﹏０-９＿]"),Ge=/[\n\r\u2028\u2029]/;var Ye=/\r\n|[\n\r\u2028\u2029]/g;const Ve=r.isIdentifierStart=function(e){return e<65?36===e:e<91||(e<97?95===e:e<123||e>=170&&Be.test(String.fromCharCode(e)))},Xe=r.isIdentifierChar=function(e){return e<48?36===e:e<58||!(e<65)&&(e<91||(e<97?95===e:e<123||e>=170&&Me.test(String.fromCharCode(e))))};function Je(){this.line=g,this.column=l-b}function We(){g=1,l=b=0,v=!0,Ke()}function qe(e,t){h=l,o.locations&&(d=new Je),y=e,Ke(),E=t,v=e.beforeExpr}function He(){const e=o.onComment&&o.locations&&new Je,t=l,r=n.indexOf("*/",l+=2);if(-1===r&&T(l-2,"Unterminated comment"),l=r+2,o.locations){let e;for(Ye.lastIndex=t;(e=Ye.exec(n))&&e.index<l;)++g,b=e.index+e[0].length}o.onComment&&o.onComment(!0,n.slice(t+2,r),t,l,e,o.locations&&new Je)}function ze(){const e=l,t=o.onComment&&o.locations&&new Je;let r=n.charCodeAt(l+=2);for(;l<i&&10!==r&&13!==r&&8232!==r&&8233!==r;)++l,r=n.charCodeAt(l);o.onComment&&o.onComment(!1,n.slice(e+2,l),e,l,t,o.locations&&new Je)}function Ke(){for(;l<i;){const t=n.charCodeAt(l);if(32===t)++l;else if(13===t)++l,10===(e=n.charCodeAt(l))&&++l,o.locations&&(++g,b=l);else if(10===t||8232===t||8233===t)++l,o.locations&&(++g,b=l);else if(t>8&&t<14)++l;else if(47===t){var e;if(42===(e=n.charCodeAt(l+1)))He();else{if(47!==e)break;ze()}}else if(160===t)++l;else{if(!(t>=5760&&Le.test(String.fromCharCode(t))))break;++l}}}function $e(e){if(e?l=u+1:u=l,o.locations&&(f=new Je),e)return Ze();if(l>=i)return qe(k);const t=n.charCodeAt(l);if(Ve(t)||92===t)return it();const r=function(e){switch(e){case 46:return function(){const e=n.charCodeAt(l+1);return e>=48&&e<=57?tt(!0):(++l,qe(de))}();case 40:return++l,qe(pe);case 41:return++l,qe(le);case 59:return++l,qe(he);case 44:return++l,qe(ue);case 91:return++l,qe(ie);case 93:return++l,qe(se);case 123:return++l,qe(ae);case 125:return++l,qe(ce);case 58:return++l,qe(fe);case 63:return++l,qe(ye);case 48:const t=n.charCodeAt(l+1);if(120===t||88===t)return function(){l+=2;const e=et(16);return null==e&&T(u+2,"Expected hexadecimal number"),Ve(n.charCodeAt(l))&&T(l,"Identifier directly after number"),qe(w,e)}();case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return tt(!1);case 34:case 39:return function(e){l++;let t="";for(;;){l>=i&&T(u,"Unterminated string constant");let r=n.charCodeAt(l);if(r===e)return++l,qe(x,t);if(92===r){r=n.charCodeAt(++l);let e=/^[0-7]+/.exec(n.slice(l,l+3));for(e&&(e=e[0]);e&&parseInt(e,8)>255;)e=e.slice(0,-1);if("0"===e&&(e=null),++l,e)P&&T(l-2,"Octal literal in strict mode"),t+=String.fromCharCode(parseInt(e,8)),l+=e.length-1;else switch(r){case 110:t+="\n";break;case 114:t+="\r";break;case 120:t+=String.fromCharCode(rt(2));break;case 117:t+=String.fromCharCode(rt(4));break;case 85:t+=String.fromCharCode(rt(8));break;case 116:t+="\t";break;case 98:t+="\b";break;case 118:t+="\v";break;case 102:t+="\f";break;case 48:t+="\0";break;case 13:10===n.charCodeAt(l)&&++l;case 10:o.locations&&(b=l,++g);break;default:t+=String.fromCharCode(r)}}else 13!==r&&10!==r&&8232!==r&&8233!==r||T(u,"Unterminated string constant"),t+=String.fromCharCode(r),++l}}(e);case 47:return function(){const e=n.charCodeAt(l+1);return v?(++l,Ze()):61===e?Qe(ge,2):Qe(Ee,1)}();case 37:case 42:return 61===n.charCodeAt(l+1)?Qe(ge,2):Qe(xe,1);case 124:case 38:return function(e){const t=n.charCodeAt(l+1);return t===e?Qe(124===e?Re:Oe,2):61===t?Qe(ge,2):Qe(124===e?me:Pe,1)}(e);case 94:return 61===n.charCodeAt(l+1)?Qe(ge,2):Qe(Ne,1);case 43:case 45:return function(e){const t=n.charCodeAt(l+1);return t===e?45==t&&62==n.charCodeAt(l+2)&&Ge.test(n.slice(R,l))?(l+=3,ze(),Ke(),$e()):Qe(be,2):61===t?Qe(ge,2):Qe(Ce,1)}(e);case 60:case 62:return function(e){const t=n.charCodeAt(l+1);let r=1;return t===e?(r=62===e&&62===n.charCodeAt(l+2)?3:2,61===n.charCodeAt(l+r)?Qe(ge,r+1):Qe(we,r)):33==t&&60==e&&45==n.charCodeAt(l+2)&&45==n.charCodeAt(l+3)?(l+=4,ze(),Ke(),$e()):(61===t&&(r=61===n.charCodeAt(l+2)?3:2),Qe(Se,r))}(e);case 61:case 33:return function(e){return 61===n.charCodeAt(l+1)?Qe(Te,61===n.charCodeAt(l+2)?3:2):Qe(61===e?ve:_e,1)}(e);case 126:return Qe(_e,1)}return!1}(t);if(!1===r){const e=String.fromCharCode(t);if("\\"===e||Be.test(e))return it();T(l,"Unexpected character '"+e+"'")}return r}function Qe(e,t){const r=n.slice(l,l+t);l+=t,qe(e,r)}function Ze(){for(var e,t,r=l;;){l>=i&&T(r,"Unterminated regular expression");const o=n.charAt(l);if(Ge.test(o)&&T(r,"Unterminated regular expression"),e)e=!1;else{if("["===o)t=!0;else if("]"===o&&t)t=!1;else if("/"===o&&!t)break;e="\\"===o}++l}var o=n.slice(r,l);++l;const s=nt();return s&&!/^[gmsiy]*$/.test(s)&&T(r,"Invalid regexp flag"),qe(C,new RegExp(o,s))}function et(e,t){const r=l;let o=0,i=0;const s=null==t?1/0:t;for(;i<s;++i){const t=n.charCodeAt(l);let r;if(r=t>=97?t-97+10:t>=65?t-65+10:t>=48&&t<=57?t-48:1/0,r>=e)break;++l,o=o*e+r}return l===r||null!=t&&l-r!==t?null:o}function tt(e){const t=l;let r=!1;const o=48===n.charCodeAt(l);e||null!==et(10)||T(t,"Invalid number"),46===n.charCodeAt(l)&&(++l,et(10),r=!0);let i=n.charCodeAt(l);69!==i&&101!==i||(i=n.charCodeAt(++l),43!==i&&45!==i||++l,null===et(10)&&T(t,"Invalid number"),r=!0),Ve(n.charCodeAt(l))&&T(l,"Identifier directly after number");const s=n.slice(t,l);let a;return r?a=parseFloat(s):o&&1!==s.length?/[89]/.test(s)||P?T(t,"Invalid number"):a=parseInt(s,8):a=parseInt(s,10),qe(w,a)}function rt(e){const t=et(16,e);return null===t&&T(u,"Bad character escape sequence"),t}let ot;function nt(){ot=!1;let e,t=!0;const r=l;for(;;){const o=n.charCodeAt(l);if(Xe(o))ot&&(e+=n.charAt(l)),++l;else{if(92!==o)break;{ot||(e=n.slice(r,l)),ot=!0,117!=n.charCodeAt(++l)&&T(l,"Expecting Unicode escape sequence \\uXXXX"),++l;const o=rt(4),i=String.fromCharCode(o);i||T(l-1,"Invalid Unicode escape"),(t?Ve(o):Xe(o))||T(l-4,"Invalid Unicode escape"),e+=i}}t=!1}return ot?e:n.slice(r,l)}function it(){const e=nt();let t=A;return ot||(Ue(e)?t=ne[e]:(o.forbidReserved&&(3===o.ecmaVersion?ke:je)(e)||P&&Ie(e))&&T(u,"The keyword '"+e+"' is reserved")),qe(t,e)}function st(){_=u,R=h,O=d,$e()}function at(e){if(P=e,l=R,o.locations)for(;l<b;)b=n.lastIndexOf("\n",b-2)+1,--g;Ke(),$e()}function ct(){this.type=null,this.start=u,this.end=null}function pt(){this.start=f,this.end=null,null!==s&&(this.source=s)}function lt(){const e=new ct;return o.locations&&(e.loc=new pt),o.directSourceFile&&(e.sourceFile=o.directSourceFile),o.ranges&&(e.range=[u,0]),e}function ut(e){const t=new ct;return t.start=e.start,o.locations&&(t.loc=new pt,t.loc.start=e.loc.start),o.ranges&&(t.range=[e.range[0],0]),t}function ht(e,t){return e.type=t,e.end=R,o.locations&&(e.loc.end=O),o.ranges&&(e.range[1]=R),e}function ft(e){return o.ecmaVersion>=5&&"ExpressionStatement"===e.type&&"Literal"===e.expression.type&&"use strict"===e.expression.value}function dt(e){if(y===e)return st(),!0}function yt(){return!o.strictSemicolons&&(y===k||y===ce||Ge.test(n.slice(R,u)))}function Et(){dt(he)||yt()||gt()}function vt(e){y===e?st():gt()}function gt(){T(u,"Unexpected token")}function bt(e){"Identifier"!==e.type&&"MemberExpression"!==e.type&&T(e.start,"Assigning to rvalue"),P&&"Identifier"===e.type&&Fe(e.name)&&T(e.start,"Assigning to "+e.name+" in strict mode")}const _t={kind:"loop"},Rt={kind:"switch"};function Ot(){(y===Ee||y===ge&&"/="==E)&&$e(!0);const e=y,t=lt();switch(e){case j:case U:st();const a=e===j;dt(he)||yt()?t.label=null:y!==A?gt():(t.label=Lt(),Et());for(var r=0;r<N.length;++r){const e=N[r];if(null==t.label||e.name===t.label.name){if(null!=e.kind&&(a||"loop"===e.kind))break;if(t.label&&a)break}}return r===N.length&&T(t.start,"Unsyntactic "+e.keyword),ht(t,a?"BreakStatement":"ContinueStatement");case L:return st(),Et(),ht(t,"DebuggerStatement");case B:return st(),N.push(_t),t.body=Ot(),N.pop(),vt(K),t.test=mt(),Et(),ht(t,"DoWhileStatement");case Y:if(st(),N.push(_t),vt(pe),y===he)return Pt(t,null);if(y===z){var o=lt();return st(),St(o,!0),ht(o,"VariableDeclaration"),1===o.declarations.length&&dt(oe)?Tt(t,o):Pt(t,o)}return o=wt(!1,!0),dt(oe)?(bt(o),Tt(t,o)):Pt(t,o);case V:return st(),Ft(t,!0);case X:return st(),t.test=mt(),t.consequent=Ot(),t.alternate=dt(M)?Ot():null,ht(t,"IfStatement");case J:return m||T(u,"'return' outside of function"),st(),dt(he)||yt()?t.argument=null:(t.argument=wt(),Et()),ht(t,"ReturnStatement");case W:st(),t.discriminant=mt(),t.cases=[],vt(ae),N.push(Rt);for(var i,s;y!=ce;)if(y===I||y===D){const e=y===I;i&&ht(i,"SwitchCase"),t.cases.push(i=lt()),i.consequent=[],st(),e?i.test=wt():(s&&T(_,"Multiple default clauses"),s=!0,i.test=null),vt(fe)}else i||gt(),i.consequent.push(Ot());return i&&ht(i,"SwitchCase"),st(),N.pop(),ht(t,"SwitchStatement");case q:return st(),Ge.test(n.slice(R,u))&&T(R,"Illegal newline after throw"),t.argument=wt(),Et(),ht(t,"ThrowStatement");case H:if(st(),t.block=Nt(),t.handler=null,y===F){const e=lt();st(),vt(pe),e.param=Lt(),P&&Fe(e.param.name)&&T(e.param.start,"Binding "+e.param.name+" in strict mode"),vt(le),e.guard=null,e.body=Nt(),t.handler=ht(e,"CatchClause")}return t.guardedHandlers=S,t.finalizer=dt(G)?Nt():null,t.handler||t.finalizer||T(t.start,"Missing catch or finally clause"),ht(t,"TryStatement");case z:return st(),St(t),Et(),ht(t,"VariableDeclaration");case K:return st(),t.test=mt(),N.push(_t),t.body=Ot(),N.pop(),ht(t,"WhileStatement");case $:return P&&T(u,"'with' in strict mode"),st(),t.object=mt(),t.body=Ot(),ht(t,"WithStatement");case ae:return Nt();case he:return st(),ht(t,"EmptyStatement");default:const c=E,p=wt();if(e===A&&"Identifier"===p.type&&dt(fe)){for(r=0;r<N.length;++r)N[r].name===c&&T(p.start,"Label '"+c+"' is already declared");const e=y.isLoop?"loop":y===W?"switch":null;return N.push({name:c,kind:e}),t.body=Ot(),N.pop(),t.label=p,ht(t,"LabeledStatement")}return t.expression=p,Et(),ht(t,"ExpressionStatement")}}function mt(){vt(pe);const e=wt();return vt(le),e}function Nt(e){const t=lt();let r,o=!0,n=!1;for(t.body=[],vt(ae);!dt(ce);){const i=Ot();t.body.push(i),o&&e&&ft(i)&&(r=n,at(n=!0)),o=!1}return n&&!r&&at(!1),ht(t,"BlockStatement")}function Pt(e,t){return e.init=t,vt(he),e.test=y===he?null:wt(),vt(he),e.update=y===le?null:wt(),vt(le),e.body=Ot(),N.pop(),ht(e,"ForStatement")}function Tt(e,t){return e.left=t,e.right=wt(),vt(le),e.body=Ot(),N.pop(),ht(e,"ForInStatement")}function St(e,t){for(e.declarations=[],e.kind="var";;){const r=lt();if(r.id=Lt(),P&&Fe(r.id.name)&&T(r.id.start,"Binding "+r.id.name+" in strict mode"),r.init=dt(ve)?wt(!0,t):null,e.declarations.push(ht(r,"VariableDeclarator")),!dt(ue))break}return e}function wt(e,t){const r=Ct(t);if(!e&&y===ue){const e=ut(r);for(e.expressions=[r];dt(ue);)e.expressions.push(Ct(t));return ht(e,"SequenceExpression")}return r}function Ct(e){const t=function(e){const t=function(e){return xt(At(),-1,e)}(e);if(dt(ye)){const r=ut(t);return r.test=t,r.consequent=wt(!0),vt(fe),r.alternate=wt(!0,e),ht(r,"ConditionalExpression")}return t}(e);if(y.isAssign){const r=ut(t);return r.operator=E,r.left=t,st(),r.right=Ct(e),bt(t),ht(r,"AssignmentExpression")}return t}function xt(e,t,r){const o=y.binop;if(null!=o&&(!r||y!==oe)&&o>t){const n=ut(e);n.left=e,n.operator=E;const i=y;return st(),n.right=xt(At(),o,r),xt(ht(n,i===Re||i===Oe?"LogicalExpression":"BinaryExpression"),t,r)}return e}function At(){if(y.prefix){var e=lt(),t=y.isUpdate;return e.operator=E,e.prefix=!0,v=!0,st(),e.argument=At(),t?bt(e.argument):P&&"delete"===e.operator&&"Identifier"===e.argument.type&&T(e.start,"Deleting local variable in strict mode"),ht(e,t?"UpdateExpression":"UnaryExpression")}let r=kt(jt());for(;y.postfix&&!yt();)(e=ut(r)).operator=E,e.prefix=!1,e.argument=r,bt(r),st(),r=ht(e,"UpdateExpression");return r}function kt(e,t){var r;return dt(de)?((r=ut(e)).object=e,r.property=Lt(!0),r.computed=!1,kt(ht(r,"MemberExpression"),t)):dt(ie)?((r=ut(e)).object=e,r.property=wt(),r.computed=!0,vt(se),kt(ht(r,"MemberExpression"),t)):!t&&dt(pe)?((r=ut(e)).callee=e,r.arguments=Ut(le,!1),kt(ht(r,"CallExpression"),t)):e}function jt(){switch(y){case Z:var e=lt();return st(),ht(e,"ThisExpression");case A:return Lt();case w:case x:case C:return(e=lt()).value=E,e.raw=n.slice(u,h),st(),ht(e,"Literal");case ee:case te:case re:return(e=lt()).value=y.atomValue,e.raw=y.keyword,st(),ht(e,"Literal");case pe:const t=f,r=u;st();const i=wt();return i.start=r,i.end=h,o.locations&&(i.loc.start=t,i.loc.end=d),o.ranges&&(i.range=[r,h]),vt(le),i;case ie:return e=lt(),st(),e.elements=Ut(se,!0,!0),ht(e,"ArrayExpression");case ae:return function(){const e=lt();let t=!0,r=!1;for(e.properties=[],st();!dt(ce);){if(t)t=!1;else if(vt(ue),o.allowTrailingCommas&&dt(ce))break;const n={key:It()};let i,s=!1;if(dt(fe)?(n.value=wt(!0),i=n.kind="init"):o.ecmaVersion>=5&&"Identifier"===n.key.type&&("get"===n.key.name||"set"===n.key.name)?(s=r=!0,i=n.kind=n.key.name,n.key=It(),y!==pe&&gt(),n.value=Ft(lt(),!1)):gt(),"Identifier"===n.key.type&&(P||r))for(let t=0;t<e.properties.length;++t){const r=e.properties[t];if(r.key.name===n.key.name){let e=i==r.kind||s&&"init"===r.kind||"init"===i&&("get"===r.kind||"set"===r.kind);e&&!P&&"init"===i&&"init"===r.kind&&(e=!1),e&&T(n.key.start,"Redefinition of property")}}e.properties.push(n)}return ht(e,"ObjectExpression")}();case V:return e=lt(),st(),Ft(e,!1);case Q:return function(){const e=lt();return st(),e.callee=kt(jt(),!0),dt(pe)?e.arguments=Ut(le,!1):e.arguments=S,ht(e,"NewExpression")}();default:gt()}}function It(){return y===w||y===x?jt():Lt(!0)}function Ft(e,t){y===A?e.id=Lt():t?gt():e.id=null,e.params=[];let r=!0;for(vt(pe);!dt(le);)r?r=!1:vt(ue),e.params.push(Lt());const o=m,n=N;if(m=!0,N=[],e.body=Nt(!0),m=o,N=n,P||e.body.body.length&&ft(e.body.body[0]))for(let t=e.id?-1:0;t<e.params.length;++t){const r=t<0?e.id:e.params[t];if((Ie(r.name)||Fe(r.name))&&T(r.start,"Defining '"+r.name+"' in strict mode"),t>=0)for(let o=0;o<t;++o)r.name===e.params[o].name&&T(r.start,"Argument name clash in strict mode")}return ht(e,t?"FunctionDeclaration":"FunctionExpression")}function Ut(e,t,r){const n=[];let i=!0;for(;!dt(e);){if(i)i=!1;else if(vt(ue),t&&o.allowTrailingCommas&&dt(e))break;r&&y===ue?n.push(null):n.push(wt(!0))}return n}function Lt(e){const t=lt();return t.name=y===A?E:e&&!o.forbidReserved&&y.keyword||gt(),v=!1,st(),ht(t,"Identifier")}var Dt=function(e,t){this.uid=Math.random().toString(16).substr(2),this.halted_=!1,this.hasCompleteFuncRun_=!1,this.completeFunc_=function(){},this.hasErrorFuncRun_=!1,this.errorFunc_=function(){},this.unpauseFunc_=function(){},"string"==typeof e&&(e=r.parse(e,Dt.PARSE_OPTIONS)),this.nodeConstructor=e.constructor;var o=new this.nodeConstructor({options:{}});for(var n in e)o[n]="body"===n?e[n].slice():e[n];this.ast=o,this.initFunc_=t,this.paused_=!1,this.polyfills_=[],this.functionCounter_=0,this.stepFunctions_=Object.create(null);var i,s,a=/^step([A-Z]\w*)$/;for(var c in this)"function"==typeof this[c]&&(i=c.match(a))&&(this.stepFunctions_[i[1]]=this[c].bind(this));this.globalScope=this.createScope(this.ast,null),this.globalObject=this.globalScope.object,this.ast=r.parse(this.polyfills_.join("\n"),Dt.PARSE_OPTIONS),this.polyfills_=void 0,Dt.stripLocations_(this.ast,void 0,void 0),(s=new Dt.State(this.ast,this.globalScope)).done=!1,this.stateStack=[s],this.run(),this.value=void 0,this.ast=o,(s=new Dt.State(this.ast,this.globalScope)).done=!1,this.stateStack.length=0,this.stateStack[0]=s,this.stateStack=this.stateStack};Dt.Completion={NORMAL:0,BREAK:1,CONTINUE:2,RETURN:3,THROW:4},Dt.PARSE_OPTIONS={ecmaVersion:5},Dt.READONLY_DESCRIPTOR={configurable:!0,enumerable:!0,writable:!1},Dt.NONENUMERABLE_DESCRIPTOR={configurable:!0,enumerable:!1,writable:!0},Dt.READONLY_NONENUMERABLE_DESCRIPTOR={configurable:!0,enumerable:!1,writable:!1},Dt.NONCONFIGURABLE_READONLY_NONENUMERABLE_DESCRIPTOR={configurable:!1,enumerable:!1,writable:!1},Dt.VARIABLE_DESCRIPTOR={configurable:!1,enumerable:!0,writable:!0},Dt.STEP_ERROR={STEP_ERROR:!0},Dt.SCOPE_REFERENCE={SCOPE_REFERENCE:!0},Dt.VALUE_IN_DESCRIPTOR={VALUE_IN_DESCRIPTOR:!0},Dt.REGEXP_TIMEOUT={REGEXP_TIMEOUT:!0},Dt.toStringCycles_=[],Dt.vm=null,Dt.nativeGlobal=void 0,Dt.WORKER_CODE=["onmessage = function(e) {","var result;","var data = e.data;","switch (data[0]) {","case 'split':","result = data[1].split(data[2], data[3]);","break;","case 'match':","result = data[1].match(data[2]);","break;","case 'search':","result = data[1].search(data[2]);","break;","case 'replace':","result = data[1].replace(data[2], data[3]);","break;","case 'exec':","var regexp = data[1];","regexp.lastIndex = data[2];","result = [regexp.exec(data[3]), data[1].lastIndex];","break;","default:","throw Error('Unknown RegExp operation: ' + data[0]);","}","postMessage(result);","};"],Dt.legalArrayLength=function(e){var t=e>>>0;return t===Number(e)?t:NaN},Dt.legalArrayIndex=function(e){var t=e>>>0;return String(t)===String(e)&&4294967295!==t?t:NaN},Dt.stripLocations_=function(e,t,r){for(var o in t?e.start=t:delete e.start,r?e.end=r:delete e.end,e)if(e.hasOwnProperty(o)){var n=e[o];n&&"object"==typeof n&&Dt.stripLocations_(n,t,r)}},Dt.prototype.REGEXP_MODE=2,Dt.prototype.REGEXP_THREAD_TIMEOUT=1e3,Dt.prototype.POLYFILL_TIMEOUT=1e3,Dt.prototype.getterStep_=!1,Dt.prototype.setterStep_=!1,Dt.prototype.appendCode=function(e){var t=this.stateStack[0];if(!t||"Program"!==t.node.type)throw Error("Expecting original AST to start with a Program node.");if("string"==typeof e&&(e=r.parse(e,Dt.PARSE_OPTIONS)),!e||"Program"!==e.type)throw Error("Expecting new AST to start with a Program node.");this.populateScope_(e,t.scope),Array.prototype.push.apply(t.node.body,e.body),t.done=!1},Dt.prototype.step=function(){var e=this.stateStack;Date.now();do{var t=e[e.length-1];if(!t)return!1;var r=t.node,o=r.type;if("Program"===o&&t.done)return this.completeFunc_(),!1;if(this.paused_)return!0;try{var n=this.stepFunctions_[o](e,t,r)}catch(e){if(e!==Dt.STEP_ERROR)throw e}if(n&&e.push(n),this.getterStep_)throw Error("Getter not supported in this context");if(this.setterStep_)throw Error("Setter not supported in this context")}while(!r.end);return!0},Dt.prototype.halt=function(){this.halted_=!0},Dt.prototype.run=function(){for(;!this.paused_&&this.step(););return this.paused_},Dt.prototype.runAll=function(e,t){var r=this;r.errorFunc_=()=>{r.hasErrorFuncRun_||(r.hasErrorFuncRun_=!0,e())},r.completeFunc_=()=>{r.hasCompleteFuncRun_||(r.hasCompleteFuncRun_=!0,t())},r.unpauseFunc_=function(){try{r.run()}catch(e){r.errorFunc_(e)}};try{r.run()}catch(e){r.errorFunc_(e)}},Dt.prototype.callFunction=function(e,t,r){var o=this.buildFunctionCaller_.apply(this,arguments);return new Dt.Callback(o)},Dt.prototype.queueFunction=function(e,t,r){var o=this.stateStack[0],n=this.buildFunctionCaller_.apply(this,arguments);return o.node.body.push(n),o.done=!1,new Dt.Callback(n,!0)},Dt.prototype.buildFunctionCaller_=function(e,t,r){var o=this,n=Array.prototype.slice.call(arguments,2).map((function(e){return e instanceof Dt.Object?e:o.nativeToPseudo(e)})),i=this.stateStack[this.stateStack.length-1].scope,s=new this.nodeConstructor({options:{}});return s.type="CallExpressionFunc_",s.funcThis_=t,s.func_=e,s.arguments_=n,s.scope_=i,s},Dt.prototype.initGlobal=function(e){this.setProperty(e,"NaN",NaN,Dt.READONLY_DESCRIPTOR),this.setProperty(e,"Infinity",1/0,Dt.READONLY_DESCRIPTOR),this.setProperty(e,"undefined",void 0,Dt.READONLY_DESCRIPTOR),this.setProperty(e,"window",e,Dt.READONLY_DESCRIPTOR),this.setProperty(e,"this",e,Dt.READONLY_DESCRIPTOR),this.setProperty(e,"self",e),this.OBJECT_PROTO=new Dt.Object(null),this.FUNCTION_PROTO=new Dt.Object(this.OBJECT_PROTO),this.initFunction(e),this.initObject(e),e.proto=this.OBJECT_PROTO,this.setProperty(e,"constructor",this.OBJECT,Dt.NONENUMERABLE_DESCRIPTOR),this.initArray(e),this.initString(e),this.initBoolean(e),this.initNumber(e),this.initDate(e),this.initRegExp(e),this.initError(e),this.initMath(e),this.initJSON(e);var t=this,r=this.createNativeFunction((function(e){throw EvalError("Can't happen")}),!1);r.eval=!0,this.setProperty(e,"eval",r),this.setProperty(e,"parseInt",this.createNativeFunction(parseInt,!1)),this.setProperty(e,"parseFloat",this.createNativeFunction(parseFloat,!1)),this.setProperty(e,"isNaN",this.createNativeFunction(isNaN,!1)),this.setProperty(e,"isFinite",this.createNativeFunction(isFinite,!1));for(var o=[[escape,"escape"],[unescape,"unescape"],[decodeURI,"decodeURI"],[decodeURIComponent,"decodeURIComponent"],[encodeURI,"encodeURI"],[encodeURIComponent,"encodeURIComponent"]],n=0;n<o.length;n++){var i=function(e){return function(r){try{return e(r)}catch(e){t.throwException(t.URI_ERROR,e.message)}}}(o[n][0]);this.setProperty(e,o[n][1],this.createNativeFunction(i,!1),Dt.NONENUMERABLE_DESCRIPTOR)}this.OBJECT=this.OBJECT,this.OBJECT_PROTO=this.OBJECT_PROTO,this.FUNCTION=this.FUNCTION,this.FUNCTION_PROTO=this.FUNCTION_PROTO,this.ARRAY=this.ARRAY,this.ARRAY_PROTO=this.ARRAY_PROTO,this.REGEXP=this.REGEXP,this.REGEXP_PROTO=this.REGEXP_PROTO,this.DATE=this.DATE,this.DATE_PROTO=this.DATE_PROTO,this.initFunc_&&this.initFunc_(this,e)},Dt.prototype.initFunction=function(e){var t,o=this,n=/^[A-Za-z_$][\w$]*$/;t=function(e){if(arguments.length)var t=String(arguments[arguments.length-1]);else t="";var i=Array.prototype.slice.call(arguments,0,-1).join(",").trim();if(i){for(var s=i.split(/\s*,\s*/),a=0;a<s.length;a++){var c=s[a];n.test(c)||o.throwException(o.SYNTAX_ERROR,"Invalid function argument: "+c)}i=s.join(", ")}try{var p=r.parse("(function("+i+") {"+t+"})",Dt.PARSE_OPTIONS)}catch(e){o.throwException(o.SYNTAX_ERROR,"Invalid code: "+e.message)}1!==p.body.length&&o.throwException(o.SYNTAX_ERROR,"Invalid code in function body.");var l=p.body[0].expression;return o.createFunction(l,o.globalScope,"anonymous")},this.FUNCTION=this.createNativeFunction(t,!0),this.setProperty(e,"Function",this.FUNCTION,Dt.NONENUMERABLE_DESCRIPTOR),this.setProperty(this.FUNCTION,"prototype",this.FUNCTION_PROTO,Dt.NONENUMERABLE_DESCRIPTOR),this.setProperty(this.FUNCTION_PROTO,"constructor",this.FUNCTION,Dt.NONENUMERABLE_DESCRIPTOR),this.FUNCTION_PROTO.nativeFunc=function(){},this.FUNCTION_PROTO.nativeFunc.id=this.functionCounter_++,this.FUNCTION_PROTO.illegalConstructor=!0,this.setProperty(this.FUNCTION_PROTO,"length",0,Dt.READONLY_NONENUMERABLE_DESCRIPTOR),this.FUNCTION_PROTO.class="Function",t=function(e,t){var r=o.stateStack[o.stateStack.length-1];r.func_=this,r.funcThis_=e,r.arguments_=[],null!=t&&(t instanceof Dt.Object?r.arguments_=o.arrayPseudoToNative(t):o.throwException(o.TYPE_ERROR,"CreateListFromArrayLike called on non-object")),r.doneExec_=!1},this.setNativeFunctionPrototype(this.FUNCTION,"apply",t),t=function(e){var t=o.stateStack[o.stateStack.length-1];t.func_=this,t.funcThis_=e,t.arguments_=[];for(var r=1;r<arguments.length;r++)t.arguments_.push(arguments[r]);t.doneExec_=!1},this.setNativeFunctionPrototype(this.FUNCTION,"call",t),this.polyfills_.push("Object.defineProperty(Function.prototype, 'bind',","{configurable: true, writable: true, value:","function bind(oThis) {","if (typeof this !== 'function') {","throw TypeError('What is trying to be bound is not callable');","}","var aArgs   = Array.prototype.slice.call(arguments, 1),","fToBind = this,","fNOP    = function() {},","fBound  = function() {","return fToBind.apply(this instanceof fNOP","? this",": oThis,","aArgs.concat(Array.prototype.slice.call(arguments)));","};","if (this.prototype) {","fNOP.prototype = this.prototype;","}","fBound.prototype = new fNOP();","return fBound;","}","});",""),t=function(){return String(this)},this.setNativeFunctionPrototype(this.FUNCTION,"toString",t),this.setProperty(this.FUNCTION,"toString",this.createNativeFunction(t,!1),Dt.NONENUMERABLE_DESCRIPTOR),t=function(){return this.valueOf()},this.setNativeFunctionPrototype(this.FUNCTION,"valueOf",t),this.setProperty(this.FUNCTION,"valueOf",this.createNativeFunction(t,!1),Dt.NONENUMERABLE_DESCRIPTOR)},Dt.prototype.initObject=function(e){var t,r=this;t=function(e){if(null==e)return r.calledWithNew()?this:r.createObjectProto(r.OBJECT_PROTO);if(!(e instanceof Dt.Object)){var t=r.createObjectProto(r.getPrototype(e));return t.data=e,t}return e},this.OBJECT=this.createNativeFunction(t,!0),this.setProperty(this.OBJECT,"prototype",this.OBJECT_PROTO,Dt.NONENUMERABLE_DESCRIPTOR),this.setProperty(this.OBJECT_PROTO,"constructor",this.OBJECT,Dt.NONENUMERABLE_DESCRIPTOR),this.setProperty(e,"Object",this.OBJECT,Dt.NONENUMERABLE_DESCRIPTOR);var o=function(e){null==e&&r.throwException(r.TYPE_ERROR,"Cannot convert '"+e+"' to object")};t=function(e){o(e);var t=e instanceof Dt.Object?e.properties:e;return r.arrayNativeToPseudo(Object.getOwnPropertyNames(t))},this.setProperty(this.OBJECT,"getOwnPropertyNames",this.createNativeFunction(t,!1),Dt.NONENUMERABLE_DESCRIPTOR),t=function(e){return o(e),e instanceof Dt.Object&&(e=e.properties),r.arrayNativeToPseudo(Object.keys(e))},this.setProperty(this.OBJECT,"keys",this.createNativeFunction(t,!1),Dt.NONENUMERABLE_DESCRIPTOR),t=function(e){return null===e?r.createObjectProto(null):(e instanceof Dt.Object||r.throwException(r.TYPE_ERROR,"Object prototype may only be an Object or null"),r.createObjectProto(e))},this.setProperty(this.OBJECT,"create",this.createNativeFunction(t,!1),Dt.NONENUMERABLE_DESCRIPTOR),this.polyfills_.push("(function() {","var create_ = Object.create;","Object.create = function create(proto, props) {","var obj = create_(proto);","props && Object.defineProperties(obj, props);","return obj;","};","})();",""),t=function(e,t,o){return t=String(t),e instanceof Dt.Object||r.throwException(r.TYPE_ERROR,"Object.defineProperty called on non-object"),o instanceof Dt.Object||r.throwException(r.TYPE_ERROR,"Property description must be an object"),!e.properties[t]&&e.preventExtensions&&r.throwException(r.TYPE_ERROR,"Can't define property '"+t+"', object is not extensible"),r.setProperty(e,t,Dt.VALUE_IN_DESCRIPTOR,o.properties),e},this.setProperty(this.OBJECT,"defineProperty",this.createNativeFunction(t,!1),Dt.NONENUMERABLE_DESCRIPTOR),this.polyfills_.push("(function() {","var defineProperty_ = Object.defineProperty;","Object.defineProperty = function defineProperty(obj, prop, d1) {","var d2 = {};","if ('configurable' in d1) d2.configurable = d1.configurable;","if ('enumerable' in d1) d2.enumerable = d1.enumerable;","if ('writable' in d1) d2.writable = d1.writable;","if ('value' in d1) d2.value = d1.value;","if ('get' in d1) d2.get = d1.get;","if ('set' in d1) d2.set = d1.set;","return defineProperty_(obj, prop, d2);","};","})();","Object.defineProperty(Object, 'defineProperties',","{configurable: true, writable: true, value:","function defineProperties(obj, props) {","var keys = Object.keys(props);","for (var i = 0; i < keys.length; i++) {","Object.defineProperty(obj, keys[i], props[keys[i]]);","}","return obj;","}","});",""),t=function(e,t){if(e instanceof Dt.Object||r.throwException(r.TYPE_ERROR,"Object.getOwnPropertyDescriptor called on non-object"),(t=String(t))in e.properties){var o=Object.getOwnPropertyDescriptor(e.properties,t),n=e.getter[t],i=e.setter[t],s=r.createObjectProto(r.OBJECT_PROTO);return n||i?(r.setProperty(s,"get",n),r.setProperty(s,"set",i)):(r.setProperty(s,"value",o.value),r.setProperty(s,"writable",o.writable)),r.setProperty(s,"configurable",o.configurable),r.setProperty(s,"enumerable",o.enumerable),s}},this.setProperty(this.OBJECT,"getOwnPropertyDescriptor",this.createNativeFunction(t,!1),Dt.NONENUMERABLE_DESCRIPTOR),t=function(e){return o(e),r.getPrototype(e)},this.setProperty(this.OBJECT,"getPrototypeOf",this.createNativeFunction(t,!1),Dt.NONENUMERABLE_DESCRIPTOR),t=function(e){return Boolean(e)&&!e.preventExtensions},this.setProperty(this.OBJECT,"isExtensible",this.createNativeFunction(t,!1),Dt.NONENUMERABLE_DESCRIPTOR),t=function(e){return e instanceof Dt.Object&&(e.preventExtensions=!0),e},this.setProperty(this.OBJECT,"preventExtensions",this.createNativeFunction(t,!1),Dt.NONENUMERABLE_DESCRIPTOR),this.setNativeFunctionPrototype(this.OBJECT,"toString",Dt.Object.prototype.toString),this.setNativeFunctionPrototype(this.OBJECT,"toLocaleString",Dt.Object.prototype.toString),this.setNativeFunctionPrototype(this.OBJECT,"valueOf",Dt.Object.prototype.valueOf),t=function(e){return o(this),this instanceof Dt.Object?String(e)in this.properties:this.hasOwnProperty(e)},this.setNativeFunctionPrototype(this.OBJECT,"hasOwnProperty",t),t=function(e){return o(this),this instanceof Dt.Object?Object.prototype.propertyIsEnumerable.call(this.properties,e):this.propertyIsEnumerable(e)},this.setNativeFunctionPrototype(this.OBJECT,"propertyIsEnumerable",t),t=function(e){for(;;){if(!(e=r.getPrototype(e)))return!1;if(e===this)return!0}},this.setNativeFunctionPrototype(this.OBJECT,"isPrototypeOf",t)},Dt.prototype.initArray=function(e){var t,r=this;t=function(e){if(r.calledWithNew())var t=this;else t=r.createArray();var o=arguments[0];if(1===arguments.length&&"number"==typeof o)isNaN(Dt.legalArrayLength(o))&&r.throwException(r.RANGE_ERROR,"Invalid array length"),t.properties.length=o;else{for(var n=0;n<arguments.length;n++)t.properties[n]=arguments[n];t.properties.length=n}return t},this.ARRAY=this.createNativeFunction(t,!0),this.ARRAY_PROTO=this.ARRAY.properties.prototype,this.setProperty(e,"Array",this.ARRAY,Dt.NONENUMERABLE_DESCRIPTOR),t=function(e){return e&&"Array"===e.class},this.setProperty(this.ARRAY,"isArray",this.createNativeFunction(t,!1),Dt.NONENUMERABLE_DESCRIPTOR),this.setProperty(this.ARRAY_PROTO,"length",0,{configurable:!1,enumerable:!1,writable:!0}),this.ARRAY_PROTO.class="Array",this.polyfills_.push("Object.defineProperty(Array.prototype, 'pop',","{configurable: true, writable: true, value:","function pop() {","if (!this) throw TypeError();","var o = Object(this);","var len = o.length >>> 0;","if (!len || len < 0) {","o.length = 0;","return undefined;","}","len--;","var x = o[len];","delete o[len];","o.length = len;","return x;","}","});","Object.defineProperty(Array.prototype, 'push',","{configurable: true, writable: true, value:","function push(var_args) {","if (!this) throw TypeError();","var o = Object(this);","var len = o.length >>> 0;","for (var i = 0; i < arguments.length; i++) {","o[len] = arguments[i];","len++;","}","o.length = len;","return len;","}","});","Object.defineProperty(Array.prototype, 'shift',","{configurable: true, writable: true, value:","function shift() {","if (!this) throw TypeError();","var o = Object(this);","var len = o.length >>> 0;","if (!len || len < 0) {","o.length = 0;","return undefined;","}","var value = o[0];","for (var i = 0; i < len - 1; i++) {","o[i] = o[i + 1];","}","delete o[i];","o.length = len - 1;","return value;","}","});","Object.defineProperty(Array.prototype, 'unshift',","{configurable: true, writable: true, value:","function unshift(var_args) {","if (!this) throw TypeError();","var o = Object(this);","var len = o.length >>> 0;","if (!len || len < 0) {","len = 0;","}","for (var i = len - 1; i >= 0; i--) {","o[i + arguments.length] = o[i];","}","for (var i = 0; i < arguments.length; i++) {","o[i] = arguments[i];","}","return o.length = len + arguments.length;","}","});","Object.defineProperty(Array.prototype, 'reverse',","{configurable: true, writable: true, value:","function reverse() {","if (!this) throw TypeError();","var o = Object(this);","var len = o.length >>> 0;","if (!len || len < 2) {","return o;","}","for (var i = 0; i < len / 2 - 0.5; i++) {","var x = o[i];","o[i] = o[len - i - 1];","o[len - i - 1] = x;","}","return o;","}","});","Object.defineProperty(Array.prototype, 'indexOf',","{configurable: true, writable: true, value:","function indexOf(searchElement, fromIndex) {","if (!this) throw TypeError();","var o = Object(this);","var len = o.length >>> 0;","var n = fromIndex | 0;","if (!len || n >= len) {","return -1;","}","var i = Math.max(n >= 0 ? n : len - Math.abs(n), 0);","while (i < len) {","if (i in o && o[i] === searchElement) {","return i;","}","i++;","}","return -1;","}","});","Object.defineProperty(Array.prototype, 'lastIndexOf',","{configurable: true, writable: true, value:","function lastIndexOf(searchElement, fromIndex) {","if (!this) throw TypeError();","var o = Object(this);","var len = o.length >>> 0;","if (!len) {","return -1;","}","var n = len - 1;","if (arguments.length > 1) {","n = fromIndex | 0;","if (n) {","n = (n > 0 || -1) * Math.floor(Math.abs(n));","}","}","var i = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n);","while (i >= 0) {","if (i in o && o[i] === searchElement) {","return i;","}","i--;","}","return -1;","}","});","Object.defineProperty(Array.prototype, 'slice',","{configurable: true, writable: true, value:","function slice(start, end) {","if (!this) throw TypeError();","var o = Object(this);","var len = o.length >>> 0;","start |= 0;","start = (start >= 0) ? start : Math.max(0, len + start);","if (typeof end !== 'undefined') {","if (end !== Infinity) {","end |= 0;","}","if (end < 0) {","end = len + end;","} else {","end = Math.min(end, len);","}","} else {","end = len;","}","var size = end - start;","var cloned = [];","for (var i = 0; i < size; i++) {","cloned[i] = o[start + i];","}","return cloned;","}","});","Object.defineProperty(Array.prototype, 'splice',","{configurable: true, writable: true, value:","function splice(start, deleteCount, var_args) {","if (!this) throw TypeError();","var o = Object(this);","var len = o.length >>> 0;","start |= 0;","if (start < 0) {","start = Math.max(len + start, 0);","} else {","start = Math.min(start, len);","}","if (arguments.length < 1) {","deleteCount = len - start;","} else {","deleteCount |= 0;","deleteCount = Math.max(0, Math.min(deleteCount, len - start));","}","var removed = [];","for (var i = start; i < start + deleteCount; i++) {","removed[removed.length++] = o[i];","o[i] = o[i + deleteCount];","}","for (var i = start + deleteCount; i < len - deleteCount; i++) {","o[i] = o[i + deleteCount];","}","for (var i = len - deleteCount; i < len; i++) {","delete o[i];","}","len -= deleteCount;","for (var i = len - 1; i >= start; i--) {","o[i + arguments.length - 2] = o[i];","}","len += arguments.length - 2;","for (var i = 2; i < arguments.length; i++) {","o[start + i - 2] = arguments[i];","}","o.length = len;","return removed;","}","});","Object.defineProperty(Array.prototype, 'concat',","{configurable: true, writable: true, value:","function concat(var_args) {","if (!this) throw TypeError();","var o = Object(this);","var cloned = [];","for (var i = -1; i < arguments.length; i++) {","var value = (i === -1) ? o : arguments[i];","if (Array.isArray(value)) {","cloned.push.apply(cloned, value);","} else {","cloned.push(value);","}","}","return cloned;","}","});","Object.defineProperty(Array.prototype, 'join',","{configurable: true, writable: true, value:","function join(opt_separator) {","if (!this) throw TypeError();","var o = Object(this);","var sep = typeof opt_separator === 'undefined' ?","',' : ('' + opt_separator);","var str = '';","for (var i = 0; i < o.length; i++) {","if (i && sep) {","str += sep;","}","str += o[i];","}","return str;","}","});","Object.defineProperty(Array.prototype, 'every',","{configurable: true, writable: true, value:","function(callbackfn, thisArg) {","if (!this || typeof callbackfn !== 'function') throw TypeError();","var T, k;","var O = Object(this);","var len = O.length >>> 0;","if (arguments.length > 1) T = thisArg;","k = 0;","while (k < len) {","if (k in O && !callbackfn.call(T, O[k], k, O)) return false;","k++;","}","return true;","}","});","Object.defineProperty(Array.prototype, 'filter',","{configurable: true, writable: true, value:","function(fun/*, thisArg*/) {","if (this === void 0 || this === null || typeof fun !== 'function') throw TypeError();","var t = Object(this);","var len = t.length >>> 0;","var res = [];","var thisArg = arguments.length >= 2 ? arguments[1] : void 0;","for (var i = 0; i < len; i++) {","if (i in t) {","var val = t[i];","if (fun.call(thisArg, val, i, t)) res.push(val);","}","}","return res;","}","});","Object.defineProperty(Array.prototype, 'forEach',","{configurable: true, writable: true, value:","function(callback, thisArg) {","if (!this || typeof callback !== 'function') throw TypeError();","var T, k;","var O = Object(this);","var len = O.length >>> 0;","if (arguments.length > 1) T = thisArg;","k = 0;","while (k < len) {","if (k in O) callback.call(T, O[k], k, O);","k++;","}","}","});","Object.defineProperty(Array.prototype, 'map',","{configurable: true, writable: true, value:","function(callback, thisArg) {","if (!this || typeof callback !== 'function') new TypeError;","var T, A, k;","var O = Object(this);","var len = O.length >>> 0;","if (arguments.length > 1) T = thisArg;","A = new Array(len);","k = 0;","while (k < len) {","if (k in O) A[k] = callback.call(T, O[k], k, O);","k++;","}","return A;","}","});","Object.defineProperty(Array.prototype, 'reduce',","{configurable: true, writable: true, value:","function(callback /*, initialValue*/) {","if (!this || typeof callback !== 'function') throw TypeError();","var t = Object(this), len = t.length >>> 0, k = 0, value;","if (arguments.length === 2) {","value = arguments[1];","} else {","while (k < len && !(k in t)) k++;","if (k >= len) {","throw TypeError('Reduce of empty array with no initial value');","}","value = t[k++];","}","for (; k < len; k++) {","if (k in t) value = callback(value, t[k], k, t);","}","return value;","}","});","Object.defineProperty(Array.prototype, 'reduceRight',","{configurable: true, writable: true, value:","function(callback /*, initialValue*/) {","if (null === this || 'undefined' === typeof this || 'function' !== typeof callback) throw TypeError();","var t = Object(this), len = t.length >>> 0, k = len - 1, value;","if (arguments.length >= 2) {","value = arguments[1];","} else {","while (k >= 0 && !(k in t)) k--;","if (k < 0) {","throw TypeError('Reduce of empty array with no initial value');","}","value = t[k--];","}","for (; k >= 0; k--) {","if (k in t) value = callback(value, t[k], k, t);","}","return value;","}","});","Object.defineProperty(Array.prototype, 'some',","{configurable: true, writable: true, value:","function(fun/*, thisArg*/) {","if (!this || typeof fun !== 'function') throw TypeError();","var t = Object(this);","var len = t.length >>> 0;","var thisArg = arguments.length >= 2 ? arguments[1] : void 0;","for (var i = 0; i < len; i++) {","if (i in t && fun.call(thisArg, t[i], i, t)) {","return true;","}","}","return false;","}","});","(function() {","var sort_ = Array.prototype.sort;","Array.prototype.sort = function(opt_comp) {","if (typeof opt_comp !== 'function') {","return sort_.call(this);","}","for (var i = 0; i < this.length; i++) {","var changes = 0;","for (var j = 0; j < this.length - i - 1; j++) {","if (opt_comp(this[j], this[j + 1]) > 0) {","var swap = this[j];","this[j] = this[j + 1];","this[j + 1] = swap;","changes++;","}","}","if (!changes) break;","}","return this;","};","})();","Object.defineProperty(Array.prototype, 'toLocaleString',","{configurable: true, writable: true, value:","function() {","var out = [];","for (var i = 0; i < this.length; i++) {","out[i] = (this[i] === null || this[i] === undefined) ? '' : this[i].toLocaleString();","}","return out.join(',');","}","});","")},Dt.prototype.initString=function(e){var t,r=this;t=function(e){return e=arguments.length?String(e):"",r.calledWithNew()?(this.data=e,this):e},this.STRING=this.createNativeFunction(t,!0),this.setProperty(e,"String",this.STRING),this.setProperty(this.STRING,"fromCharCode",this.createNativeFunction(String.fromCharCode,!1),Dt.NONENUMERABLE_DESCRIPTOR);for(var o=["charAt","charCodeAt","concat","indexOf","lastIndexOf","slice","substr","substring","toLocaleLowerCase","toLocaleUpperCase","toLowerCase","toUpperCase","trim"],n=0;n<o.length;n++)this.setNativeFunctionPrototype(this.STRING,o[n],String.prototype[o[n]]);t=function(e,t,o){return t=t?r.pseudoToNative(t):void 0,o=o?r.pseudoToNative(o):void 0,String(this).localeCompare(e,t,o)},this.setNativeFunctionPrototype(this.STRING,"localeCompare",t),t=function(e,t,o){var n=String(this);if(t=t?Number(t):void 0,r.isa(e,r.REGEXP)&&(e=e.data,r.maybeThrowRegExp(e,o),2===r.REGEXP_MODE))if(Dt.vm){var i={string:n,separator:e,limit:t};(c=r.vmCall("string.split(separator, limit)",i,e,o))!==Dt.REGEXP_TIMEOUT&&o(r.arrayNativeToPseudo(c))}else{var s=r.createWorker(),a=r.regExpTimeout(e,s,o);s.onmessage=function(e){clearTimeout(a),o(r.arrayNativeToPseudo(e.data))},s.postMessage(["split",n,e,t])}else{var c=n.split(e,t);o(r.arrayNativeToPseudo(c))}},this.setAsyncFunctionPrototype(this.STRING,"split",t),t=function(e,t){var o=String(this);if(e=r.isa(e,r.REGEXP)?e.data:new RegExp(e),r.maybeThrowRegExp(e,t),2!==r.REGEXP_MODE)n=o.match(e),t(n&&r.arrayNativeToPseudo(n));else if(Dt.vm){var n,i={string:o,regexp:e};(n=r.vmCall("string.match(regexp)",i,e,t))!==Dt.REGEXP_TIMEOUT&&t(n&&r.arrayNativeToPseudo(n))}else{var s=r.createWorker(),a=r.regExpTimeout(e,s,t);s.onmessage=function(e){clearTimeout(a),t(e.data&&r.arrayNativeToPseudo(e.data))},s.postMessage(["match",o,e])}},this.setAsyncFunctionPrototype(this.STRING,"match",t),t=function(e,t){var o=String(this);if(e=r.isa(e,r.REGEXP)?e.data:new RegExp(e),r.maybeThrowRegExp(e,t),2!==r.REGEXP_MODE)t(o.search(e));else if(Dt.vm){var n={string:o,regexp:e},i=r.vmCall("string.search(regexp)",n,e,t);i!==Dt.REGEXP_TIMEOUT&&t(i)}else{var s=r.createWorker(),a=r.regExpTimeout(e,s,t);s.onmessage=function(e){clearTimeout(a),t(e.data)},s.postMessage(["search",o,e])}},this.setAsyncFunctionPrototype(this.STRING,"search",t),t=function(e,t,o){var n=String(this);if(t=String(t),r.isa(e,r.REGEXP)&&(e=e.data,r.maybeThrowRegExp(e,o),2===r.REGEXP_MODE))if(Dt.vm){var i={string:n,substr:e,newSubstr:t},s=r.vmCall("string.replace(substr, newSubstr)",i,e,o);s!==Dt.REGEXP_TIMEOUT&&o(s)}else{var a=r.createWorker(),c=r.regExpTimeout(e,a,o);a.onmessage=function(e){clearTimeout(c),o(e.data)},a.postMessage(["replace",n,e,t])}else o(n.replace(e,t))},this.setAsyncFunctionPrototype(this.STRING,"replace",t),this.polyfills_.push("(function() {","var replace_ = String.prototype.replace;","String.prototype.replace = function(substr, newSubstr) {","if (typeof newSubstr !== 'function') {","return replace_.call(this, substr, newSubstr);","}","var str = this;","if (substr instanceof RegExp) {","var subs = [];","var m = substr.exec(str);","while (m) {","m.push(m.index, str);","var inject = newSubstr.apply(null, m);","subs.push([m.index, m[0].length, inject]);","m = substr.global ? substr.exec(str) : null;","}","for (var i = subs.length - 1; i >= 0; i--) {","str = str.substring(0, subs[i][0]) + subs[i][2] + str.substring(subs[i][0] + subs[i][1]);","}","} else {","var i = str.indexOf(substr);","if (i !== -1) {","var inject = newSubstr(str.substr(i, substr.length), i, str);","str = str.substring(0, i) + inject + str.substring(i + substr.length);","}","}","return str;","};","})();","")},Dt.prototype.initBoolean=function(e){var t,r=this;t=function(e){return e=Boolean(e),r.calledWithNew()?(this.data=e,this):e},this.BOOLEAN=this.createNativeFunction(t,!0),this.setProperty(e,"Boolean",this.BOOLEAN)},Dt.prototype.initNumber=function(e){var t,r=this;t=function(e){return e=arguments.length?Number(e):0,r.calledWithNew()?(this.data=e,this):e},this.NUMBER=this.createNativeFunction(t,!0),this.setProperty(e,"Number",this.NUMBER);for(var o=["MAX_VALUE","MIN_VALUE","NaN","NEGATIVE_INFINITY","POSITIVE_INFINITY"],n=0;n<o.length;n++)this.setProperty(this.NUMBER,o[n],Number[o[n]],Dt.READONLY_NONENUMERABLE_DESCRIPTOR);t=function(e){try{return Number(this).toExponential(e)}catch(e){r.throwException(r.ERROR,e.message)}},this.setNativeFunctionPrototype(this.NUMBER,"toExponential",t),t=function(e){try{return Number(this).toFixed(e)}catch(e){r.throwException(r.ERROR,e.message)}},this.setNativeFunctionPrototype(this.NUMBER,"toFixed",t),t=function(e){try{return Number(this).toPrecision(e)}catch(e){r.throwException(r.ERROR,e.message)}},this.setNativeFunctionPrototype(this.NUMBER,"toPrecision",t),t=function(e){try{return Number(this).toString(e)}catch(e){r.throwException(r.ERROR,e.message)}},this.setNativeFunctionPrototype(this.NUMBER,"toString",t),t=function(e,t){return e=e?r.pseudoToNative(e):void 0,t=t?r.pseudoToNative(t):void 0,Number(this).toLocaleString(e,t)},this.setNativeFunctionPrototype(this.NUMBER,"toLocaleString",t)},Dt.prototype.initDate=function(e){var t,r=this;t=function(e,t){if(!r.calledWithNew())return Date();var o=[null].concat(Array.from(arguments));return this.data=new(Function.prototype.bind.apply(Date,o)),this},this.DATE=this.createNativeFunction(t,!0),this.DATE_PROTO=this.DATE.properties.prototype,this.setProperty(e,"Date",this.DATE),this.setProperty(this.DATE,"now",this.createNativeFunction(Date.now,!1),Dt.NONENUMERABLE_DESCRIPTOR),this.setProperty(this.DATE,"parse",this.createNativeFunction(Date.parse,!1),Dt.NONENUMERABLE_DESCRIPTOR),this.setProperty(this.DATE,"UTC",this.createNativeFunction(Date.UTC,!1),Dt.NONENUMERABLE_DESCRIPTOR);for(var o=["getDate","getDay","getFullYear","getHours","getMilliseconds","getMinutes","getMonth","getSeconds","getTime","getTimezoneOffset","getUTCDate","getUTCDay","getUTCFullYear","getUTCHours","getUTCMilliseconds","getUTCMinutes","getUTCMonth","getUTCSeconds","getYear","setDate","setFullYear","setHours","setMilliseconds","setMinutes","setMonth","setSeconds","setTime","setUTCDate","setUTCFullYear","setUTCHours","setUTCMilliseconds","setUTCMinutes","setUTCMonth","setUTCSeconds","setYear","toDateString","toISOString","toJSON","toGMTString","toLocaleDateString","toLocaleString","toLocaleTimeString","toTimeString","toUTCString"],n=0;n<o.length;n++)t=function(e){return function(t){for(var o=[],n=0;n<arguments.length;n++)o[n]=r.pseudoToNative(arguments[n]);return this.data[e].apply(this.data,o)}}(o[n]),this.setNativeFunctionPrototype(this.DATE,o[n],t)},Dt.prototype.initRegExp=function(e){var t,r=this;t=function(e,t){if(r.calledWithNew())var o=this;else o=r.createObjectProto(r.REGEXP_PROTO);return e=e?String(e):"",t=t?String(t):"",r.populateRegExp(o,new RegExp(e,t)),o},this.REGEXP=this.createNativeFunction(t,!0),this.REGEXP_PROTO=this.REGEXP.properties.prototype,this.setProperty(e,"RegExp",this.REGEXP),this.setProperty(this.REGEXP.properties.prototype,"global",void 0,Dt.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(this.REGEXP.properties.prototype,"ignoreCase",void 0,Dt.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(this.REGEXP.properties.prototype,"multiline",void 0,Dt.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(this.REGEXP.properties.prototype,"source","(?:)",Dt.READONLY_NONENUMERABLE_DESCRIPTOR),this.polyfills_.push("Object.defineProperty(RegExp.prototype, 'test',","{configurable: true, writable: true, value:","function(str) {","return String(str).search(this) !== -1","}","});"),t=function(e,t){var o=this.data;if(e=String(e),o.lastIndex=Number(r.getProperty(this,"lastIndex")),r.maybeThrowRegExp(o,t),2!==r.REGEXP_MODE)n=o.exec(e),r.setProperty(this,"lastIndex",o.lastIndex),t(p(n));else if(Dt.vm){var n,i={string:e,regexp:o};(n=r.vmCall("regexp.exec(string)",i,o,t))!==Dt.REGEXP_TIMEOUT&&(r.setProperty(this,"lastIndex",o.lastIndex),t(p(n)))}else{var s=r.createWorker(),a=r.regExpTimeout(o,s,t),c=this;s.onmessage=function(e){clearTimeout(a),r.setProperty(c,"lastIndex",e.data[1]),t(p(e.data[0]))},s.postMessage(["exec",o,o.lastIndex,e])}function p(e){if(e){var t=r.arrayNativeToPseudo(e);return r.setProperty(t,"index",e.index),r.setProperty(t,"input",e.input),t}return null}},this.setAsyncFunctionPrototype(this.REGEXP,"exec",t)},Dt.prototype.initError=function(e){var t=this;this.ERROR=this.createNativeFunction((function(e){if(t.calledWithNew())var r=this;else r=t.createObject(t.ERROR);return e&&t.setProperty(r,"message",String(e),Dt.NONENUMERABLE_DESCRIPTOR),r}),!0),this.setProperty(e,"Error",this.ERROR),this.setProperty(this.ERROR.properties.prototype,"message","",Dt.NONENUMERABLE_DESCRIPTOR),this.setProperty(this.ERROR.properties.prototype,"name","Error",Dt.NONENUMERABLE_DESCRIPTOR);var r=function(r){var o=t.createNativeFunction((function(e){if(t.calledWithNew())var r=this;else r=t.createObject(o);return e&&t.setProperty(r,"message",String(e),Dt.NONENUMERABLE_DESCRIPTOR),r}),!0);return t.setProperty(o,"prototype",t.createObject(t.ERROR),Dt.NONENUMERABLE_DESCRIPTOR),t.setProperty(o.properties.prototype,"name",r,Dt.NONENUMERABLE_DESCRIPTOR),t.setProperty(e,r,o),o};this.EVAL_ERROR=r("EvalError"),this.RANGE_ERROR=r("RangeError"),this.REFERENCE_ERROR=r("ReferenceError"),this.SYNTAX_ERROR=r("SyntaxError"),this.TYPE_ERROR=r("TypeError"),this.URI_ERROR=r("URIError")},Dt.prototype.initMath=function(e){var t=this.createObjectProto(this.OBJECT_PROTO);this.setProperty(e,"Math",t);for(var r=["E","LN2","LN10","LOG2E","LOG10E","PI","SQRT1_2","SQRT2"],o=0;o<r.length;o++)this.setProperty(t,r[o],Math[r[o]],Dt.READONLY_NONENUMERABLE_DESCRIPTOR);var n=["abs","acos","asin","atan","atan2","ceil","cos","exp","floor","log","max","min","pow","random","round","sin","sqrt","tan"];for(o=0;o<n.length;o++)this.setProperty(t,n[o],this.createNativeFunction(Math[n[o]],!1),Dt.NONENUMERABLE_DESCRIPTOR)},Dt.prototype.initJSON=function(e){var t=this,r=t.createObjectProto(this.OBJECT_PROTO);this.setProperty(e,"JSON",r);var o=function(e){try{var r=JSON.parse(String(e))}catch(e){t.throwException(t.SYNTAX_ERROR,e.message)}return t.nativeToPseudo(r)};this.setProperty(r,"parse",this.createNativeFunction(o,!1)),o=function(e,r,o){r&&"Function"===r.class?t.throwException(t.TYPE_ERROR,"Function replacer on JSON.stringify not supported"):r=r&&"Array"===r.class?(r=t.arrayPseudoToNative(r)).filter((function(e){return"string"==typeof e||"number"==typeof e})):null,"string"!=typeof o&&"number"!=typeof o&&(o=void 0);var n=t.pseudoToNative(e);try{var i=JSON.stringify(n,r,o)}catch(e){t.throwException(t.TYPE_ERROR,e.message)}return i},this.setProperty(r,"stringify",this.createNativeFunction(o,!1))},Dt.prototype.isa=function(e,t){if(null==e||!t)return!1;var r=t.properties.prototype;if(e===r)return!0;for(e=this.getPrototype(e);e;){if(e===r)return!0;e=e.proto}return!1},Dt.prototype.populateRegExp=function(e,t){e.data=new RegExp(t.source,t.flags),this.setProperty(e,"lastIndex",t.lastIndex,Dt.NONENUMERABLE_DESCRIPTOR),this.setProperty(e,"source",t.source,Dt.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(e,"global",t.global,Dt.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(e,"ignoreCase",t.ignoreCase,Dt.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(e,"multiline",t.multiline,Dt.READONLY_NONENUMERABLE_DESCRIPTOR)},Dt.prototype.createWorker=function(){var e=this.createWorker.blob_;return e||(e=new Blob([Dt.WORKER_CODE.join("\n")],{type:"application/javascript"}),this.createWorker.blob_=e),new Worker(URL.createObjectURL(e))},Dt.prototype.vmCall=function(e,t,r,o){var n={timeout:this.REGEXP_THREAD_TIMEOUT};try{return Dt.vm.runInNewContext(e,t,n)}catch(e){o(null),this.throwException(this.ERROR,"RegExp Timeout: "+r)}return Dt.REGEXP_TIMEOUT},Dt.prototype.maybeThrowRegExp=function(e,r){var o;if(0===this.REGEXP_MODE)o=!1;else if(1===this.REGEXP_MODE)o=!0;else if(Dt.vm)o=!0;else if("function"==typeof Worker&&"function"==typeof URL)o=!0;else{try{Dt.vm=t(Object(function(){var e=new Error("Cannot find module 'vm'");throw e.code="MODULE_NOT_FOUND",e}()))}catch(e){}o=!!Dt.vm}o||(r(null),this.throwException(this.ERROR,"Regular expressions not supported: "+e))},Dt.prototype.regExpTimeout=function(e,t,r){var o=this;return setTimeout((function(){t.terminate(),r(null);try{o.throwException(o.ERROR,"RegExp Timeout: "+e)}catch(e){}}),this.REGEXP_THREAD_TIMEOUT)},Dt.prototype.createObject=function(e){return this.createObjectProto(e&&e.properties.prototype)},Dt.prototype.createObjectProto=function(e){if("object"!=typeof e)throw Error("Non object prototype");var t=new Dt.Object(e);return this.isa(t,this.ERROR)&&(t.class="Error"),t},Dt.prototype.createArray=function(){var e=this.createObjectProto(this.ARRAY_PROTO);return this.setProperty(e,"length",0,{configurable:!1,enumerable:!1,writable:!0}),e.class="Array",e},Dt.prototype.createFunctionBase_=function(e,t){var r=this.createObjectProto(this.FUNCTION_PROTO);if(t){var o=this.createObjectProto(this.OBJECT_PROTO);this.setProperty(r,"prototype",o,Dt.NONENUMERABLE_DESCRIPTOR),this.setProperty(o,"constructor",r,Dt.NONENUMERABLE_DESCRIPTOR)}else r.illegalConstructor=!0;return this.setProperty(r,"length",e,Dt.READONLY_NONENUMERABLE_DESCRIPTOR),r.class="Function",r},Dt.prototype.createFunction=function(e,t,r){var o=this.createFunctionBase_(e.params.length,!0);o.parentScope=t,o.node=e;var n=e.id?String(e.id.name):r||"";return this.setProperty(o,"name",n,Dt.READONLY_NONENUMERABLE_DESCRIPTOR),o},Dt.prototype.createNativeFunction=function(e,t){var r=this.createFunctionBase_(e.length,t);return r.nativeFunc=e,e.id=this.functionCounter_++,this.setProperty(r,"name",e.name,Dt.READONLY_NONENUMERABLE_DESCRIPTOR),r},Dt.prototype.createAsyncFunction=function(e){var t=this.createFunctionBase_(e.length,!0);return t.asyncFunc=e,e.id=this.functionCounter_++,this.setProperty(t,"name",e.name,Dt.READONLY_NONENUMERABLE_DESCRIPTOR),t},Dt.prototype.nativeToPseudo=function(e){if(e instanceof Dt.Object)throw Error("Object is already pseudo");if("object"!=typeof e&&"function"!=typeof e||null===e)return e;if(e instanceof RegExp){var t=this.createObjectProto(this.REGEXP_PROTO);return this.populateRegExp(t,e),t}if(e instanceof Date){var r=this.createObjectProto(this.DATE_PROTO);return r.data=new Date(e.valueOf()),r}if("object"==typeof e&&e.hasOwnProperty("_s8async"))return this.createAsyncFunction(e.run);if("function"==typeof e){var o=this,n=Object.getOwnPropertyDescriptor(e,"prototype");return this.createNativeFunction((function(){var t=Array.prototype.slice.call(arguments).map((function(e){return o.pseudoToNative(e)})),r=e.apply(o,t);return o.nativeToPseudo(r)}),!!n)}if(Array.isArray(e)){for(var i=this.createArray(),s=0;s<e.length;s++)s in e&&this.setProperty(i,s,this.nativeToPseudo(e[s]));return i}var a=this.createObjectProto(this.OBJECT_PROTO);for(var c in e)this.setProperty(a,c,this.nativeToPseudo(e[c]));return a},Dt.prototype.pseudoToNative=function(e,t){if("object"!=typeof e&&"function"!=typeof e||null===e)return e;if(!(e instanceof Dt.Object))throw Error("Object is not pseudo");if(this.isa(e,this.REGEXP)){var r=new RegExp(e.data.source,e.data.flags);return r.lastIndex=e.data.lastIndex,r}if(this.isa(e,this.DATE))return new Date(e.data.valueOf());var o,n=t||{pseudo:[],native:[]};if(-1!==(s=n.pseudo.indexOf(e)))return n.native[s];if(n.pseudo.push(e),this.isa(e,this.ARRAY)){o=[],n.native.push(o);for(var i=this.getProperty(e,"length"),s=0;s<i;s++)this.hasProperty(e,s)&&(o[s]=this.pseudoToNative(this.getProperty(e,s),n))}else{var a;for(var c in o={},n.native.push(o),e.properties)a=this.pseudoToNative(e.properties[c],n),Object.defineProperty(o,c,{value:a,writable:!0,enumerable:!0,configurable:!0})}return n.pseudo.pop(),n.native.pop(),o},Dt.prototype.arrayNativeToPseudo=function(e){for(var t=this.createArray(),r=Object.getOwnPropertyNames(e),o=0;o<r.length;o++)this.setProperty(t,r[o],e[r[o]]);return t},Dt.prototype.arrayPseudoToNative=function(e){var t=[];for(var r in e.properties)t[r]=this.getProperty(e,r);return t.length=Dt.legalArrayLength(this.getProperty(e,"length"))||0,t},Dt.prototype.getPrototype=function(e){switch(typeof e){case"number":return this.NUMBER.properties.prototype;case"boolean":return this.BOOLEAN.properties.prototype;case"string":return this.STRING.properties.prototype}return e?e.proto:null},Dt.prototype.getProperty=function(e,t){if(this.getterStep_)throw Error("Getter not supported in that context");if(t=String(t),null==e&&this.throwException(this.TYPE_ERROR,"Cannot read property '"+t+"' of "+e),"object"==typeof e&&!(e instanceof Dt.Object))throw TypeError("Expecting native value or pseudo object");if("length"===t){if(this.isa(e,this.STRING))return String(e).length}else if(t.charCodeAt(0)<64&&this.isa(e,this.STRING)){var r=Dt.legalArrayIndex(t);if(!isNaN(r)&&r<String(e).length)return String(e)[r]}do{if(e.properties&&t in e.properties){var o=e.getter[t];return o?(this.getterStep_=!0,o):e.properties[t]}}while(e=this.getPrototype(e))},Dt.prototype.hasProperty=function(e,t){if(!(e instanceof Dt.Object))throw TypeError("Primitive data type has no properties");if("length"===(t=String(t))&&this.isa(e,this.STRING))return!0;if(this.isa(e,this.STRING)){var r=Dt.legalArrayIndex(t);if(!isNaN(r)&&r<String(e).length)return!0}do{if(e.properties&&t in e.properties)return!0}while(e=this.getPrototype(e));return!1},Dt.prototype.setProperty=function(e,t,r,o){if(this.setterStep_)throw Error("Setter not supported in that context");if(t=String(t),null==e&&this.throwException(this.TYPE_ERROR,"Cannot set property '"+t+"' of "+e),"object"==typeof e&&!(e instanceof Dt.Object))throw TypeError("Expecting native value or pseudo object");o&&("get"in o||"set"in o)&&("value"in o||"writable"in o)&&this.throwException(this.TYPE_ERROR,"Invalid property descriptor. Cannot both specify accessors and a value or writable attribute");var n=!this.stateStack||this.getScope().strict;if(e instanceof Dt.Object){if(this.isa(e,this.STRING)){var i=Dt.legalArrayIndex(t);if("length"===t||!isNaN(i)&&i<String(e).length)return void(n&&this.throwException(this.TYPE_ERROR,"Cannot assign to read only property '"+t+"' of String '"+e.data+"'"))}if("Array"===e.class){var s,a=e.properties.length;if("length"===t){if(o){if(!("value"in o))return;r=o.value}if(r=Dt.legalArrayLength(r),isNaN(r)&&this.throwException(this.RANGE_ERROR,"Invalid array length"),r<a)for(s in e.properties)s=Dt.legalArrayIndex(s),!isNaN(s)&&r<=s&&delete e.properties[s]}else isNaN(s=Dt.legalArrayIndex(t))||(e.properties.length=Math.max(a,s+1))}if(!e.preventExtensions||t in e.properties)if(o){var c={};"get"in o&&o.get&&(e.getter[t]=o.get,c.get=this.setProperty.placeholderGet_),"set"in o&&o.set&&(e.setter[t]=o.set,c.set=this.setProperty.placeholderSet_),c={},"configurable"in o&&(c.configurable=o.configurable),"enumerable"in o&&(c.enumerable=o.enumerable),"writable"in o&&(c.writable=o.writable,delete e.getter[t],delete e.setter[t]),"value"in o?(c.value=o.value,delete e.getter[t],delete e.setter[t]):r!==Dt.VALUE_IN_DESCRIPTOR&&(c.value=r,delete e.getter[t],delete e.setter[t]);try{Object.defineProperty(e.properties,t,c)}catch(e){this.throwException(this.TYPE_ERROR,"Cannot redefine property: "+t)}"get"in o&&!o.get&&delete e.getter[t],"set"in o&&!o.set&&delete e.setter[t]}else{if(r===Dt.VALUE_IN_DESCRIPTOR)throw ReferenceError("Value not specified.");for(var p=e;!(t in p.properties);)if(!(p=this.getPrototype(p))){p=e;break}if(p.setter&&p.setter[t])return this.setterStep_=!0,p.setter[t];if(p.getter&&p.getter[t])n&&this.throwException(this.TYPE_ERROR,"Cannot set property '"+t+"' of object '"+e+"' which only has a getter");else try{e.properties[t]=r}catch(r){n&&this.throwException(this.TYPE_ERROR,"Cannot assign to read only property '"+t+"' of object '"+e+"'")}}else n&&this.throwException(this.TYPE_ERROR,"Can't add property '"+t+"', object is not extensible")}else n&&this.throwException(this.TYPE_ERROR,"Can't create property '"+t+"' on '"+e+"'")},Dt.prototype.setProperty.placeholderGet_=function(){throw Error("Placeholder getter")},Dt.prototype.setProperty.placeholderSet_=function(){throw Error("Placeholder setter")},Dt.prototype.setNativeFunctionPrototype=function(e,t,r){this.setProperty(e.properties.prototype,t,this.createNativeFunction(r,!1),Dt.NONENUMERABLE_DESCRIPTOR)},Dt.prototype.setAsyncFunctionPrototype=function(e,t,r){this.setProperty(e.properties.prototype,t,this.createAsyncFunction(r),Dt.NONENUMERABLE_DESCRIPTOR)},Dt.prototype.getScope=function(){var e=this.stateStack[this.stateStack.length-1].scope;if(!e)throw Error("No scope found.");return e},Dt.prototype.createScope=function(e,t){var r=!1;if(t&&t.strict)r=!0;else{var o=e.body&&e.body[0];o&&o.expression&&"Literal"===o.expression.type&&"use strict"===o.expression.value&&(r=!0)}var n=this.createObjectProto(null),i=new Dt.Scope(t,r,n);return t||this.initGlobal(i.object),this.populateScope_(e,i),i},Dt.prototype.createSpecialScope=function(e,t){if(!e)throw Error("parentScope required");var r=t||this.createObjectProto(null);return new Dt.Scope(e,e.strict,r)},Dt.prototype.getValueFromScope=function(e){for(var t=this.getScope();t&&t!==this.globalScope;){if(e in t.object.properties)return t.object.properties[e];t=t.parentScope}if(t===this.globalScope&&this.hasProperty(t.object,e))return this.getProperty(t.object,e);var r=this.stateStack[this.stateStack.length-1].node;"UnaryExpression"===r.type&&"typeof"===r.operator||this.throwException(this.REFERENCE_ERROR,e+" is not defined")},Dt.prototype.setValueToScope=function(e,t){for(var r=this.getScope(),o=r.strict;r&&r!==this.globalScope;){if(e in r.object.properties)return void(r.object.properties[e]=t);r=r.parentScope}if(r===this.globalScope&&(!o||this.hasProperty(r.object,e)))return this.setProperty(r.object,e,t);this.throwException(this.REFERENCE_ERROR,e+" is not defined")},Dt.prototype.populateScope_=function(e,t){if("VariableDeclaration"===e.type)for(var r=0;r<e.declarations.length;r++)this.setProperty(t.object,e.declarations[r].id.name,void 0,Dt.VARIABLE_DESCRIPTOR);else{if("FunctionDeclaration"===e.type)return void this.setProperty(t.object,e.id.name,this.createFunction(e,t),Dt.VARIABLE_DESCRIPTOR);if("FunctionExpression"===e.type)return;if("ExpressionStatement"===e.type)return}var o=e.constructor;for(var n in e){var i=e[n];if(i&&"object"==typeof i)if(Array.isArray(i))for(r=0;r<i.length;r++)i[r]&&i[r].constructor===o&&this.populateScope_(i[r],t);else i.constructor===o&&this.populateScope_(i,t)}},Dt.prototype.calledWithNew=function(){return this.stateStack[this.stateStack.length-1].isConstructor},Dt.prototype.getValue=function(e){return e[0]===Dt.SCOPE_REFERENCE?this.getValueFromScope(e[1]):this.getProperty(e[0],e[1])},Dt.prototype.setValue=function(e,t){return e[0]===Dt.SCOPE_REFERENCE?this.setValueToScope(e[1],t):this.setProperty(e[0],e[1],t)},Dt.prototype.throwException=function(e,t){if(void 0===t)var r=e;else r=this.createObject(e),this.setProperty(r,"message",t,Dt.NONENUMERABLE_DESCRIPTOR);throw this.unwind(Dt.Completion.THROW,r,void 0),Dt.STEP_ERROR},Dt.prototype.createThrowable=function(e,t){return new Dt.Throwable(e,t)},Dt.prototype.handleNativeResult_=function(e,t,r){if(r instanceof Dt.Callback)return r.pushState_(this,t),e.cb_=r,e.doneExec_=!1,r.state_;if(r instanceof Dt.Throwable)r.throw_(this);else{var o=e.cb_;o&&(o.stateless_?o.value=r:o.state_.value=r),e.value=r}},Dt.prototype.unwind=function(e,t,r){if(e===Dt.Completion.NORMAL)throw TypeError("Should not unwind for NORMAL completions");e:for(var o=this.stateStack;o.length>0;o.pop()){var n=o[o.length-1];switch(n.node.type){case"TryStatement":return void(n.cv={type:e,value:t,label:r});case"CallExpression":case"NewExpression":if(e===Dt.Completion.RETURN)return void(n.value=t);if(e!==Dt.Completion.THROW)throw Error("Unsynatctic break/continue not rejected by Acorn");break;case"CallExpressionFunc_":if(e===Dt.Completion.THROW&&n.catch_)return void(n.throw_=t);continue;case"Program":n.done=!0;break e}if(e===Dt.Completion.BREAK){if(r?n.labels&&-1!==n.labels.indexOf(r):n.isLoop||n.isSwitch)return void o.pop()}else if(e===Dt.Completion.CONTINUE&&(r?n.labels&&-1!==n.labels.indexOf(r):n.isLoop))return}var i;if(this.isa(t,this.ERROR)){var s={EvalError,RangeError,ReferenceError,SyntaxError,TypeError,URIError},a=String(this.getProperty(t,"name")),c=this.getProperty(t,"message").valueOf();i=(s[a]||Error)(c)}else i=String(t);throw i},Dt.prototype.createGetter_=function(e,t){if(!this.getterStep_)throw Error("Unexpected call to createGetter");this.getterStep_=!1;var r=Array.isArray(t)?t[0]:t,o=new this.nodeConstructor({options:{}});o.type="CallExpression";var n=new Dt.State(o,this.stateStack[this.stateStack.length-1].scope);return n.doneCallee_=!0,n.funcThis_=r,n.func_=e,n.doneArgs_=!0,n.arguments_=[],n},Dt.prototype.createSetter_=function(e,t,r){if(!this.setterStep_)throw Error("Unexpected call to createSetter");this.setterStep_=!1;var o=Array.isArray(t)?t[0]:this.globalObject,n=new this.nodeConstructor({options:{}});n.type="CallExpression";var i=new Dt.State(n,this.stateStack[this.stateStack.length-1].scope);return i.doneCallee_=!0,i.funcThis_=o,i.func_=e,i.doneArgs_=!0,i.arguments_=[r],i},Dt.prototype.boxThis_=function(e){if(null==e)return this.globalObject;if(!(e instanceof Dt.Object)){var t=this.createObjectProto(this.getPrototype(e));return t.data=e,t}return e},Dt.Value,Dt.State=function(e,t){this.node=e,this.scope=t},Dt.Scope=function(e,t,r){this.parentScope=e,this.strict=t,this.object=r},Dt.Throwable=function(e,t){this.errorClass=e,this.opt_message=t},Dt.Throwable.prototype.throw_=function(e){e.throwException(this.errorClass,this.opt_message)},Dt.Callback=function(e,t){this.node_=e,this.handlers_=[],this.catch_=null,this.node_.cb_=this,this.queued_=t},Dt.Callback.prototype.then=function(e){if("function"!=typeof e)throw new Error('Expected function for "then" handler');return this.handlers_.push(e),this},Dt.Callback.prototype.catch=function(e){if("function"!=typeof e)throw new Error('Expected function for "catch" handler');if(this.catch_)throw new Error('"catch" already defined');return this.catch_=e,this},Dt.Callback.prototype.pushState_=function(e,t){this.stateless_||(this.state_||(this.state_=new Dt.State(this.node_,t)),e.stateStack.push(this.state_))},Dt.Callback.prototype.doNext_=function(e){var t=this.handlers_.shift();return t?(this.force_=this.handlers_.length,t(this.stateless_?this.value:this.state_.value,e)):this.stateless_?void 0:e?void e(this.state_.value):this.state_.value},Dt.Object=function(e){this.getter=Object.create(null),this.setter=Object.create(null),this.properties=Object.create(null),this.proto=e},Dt.Object.prototype.proto=null,Dt.Object.prototype.class="Object",Dt.Object.prototype.data=null,Dt.Object.prototype.toString=function(){if(!(this instanceof Dt.Object))return String(this);if("Array"===this.class){(i=Dt.toStringCycles_).push(this);try{var e=[],t=this.properties.length,r=!1;t>1024&&(t=1e3,r=!0);for(var o=0;o<t;o++){var n=this.properties[o];e[o]=n instanceof Dt.Object&&-1!==i.indexOf(n)?"...":n}r&&e.push("...")}finally{i.pop()}return e.join(",")}if("Error"===this.class){var i,s,a;if(-1!==(i=Dt.toStringCycles_).indexOf(this))return"[object Error]";var c=this;do{if("name"in c.properties){s=c.properties.name;break}}while(c=c.proto);c=this;do{if("message"in c.properties){a=c.properties.message;break}}while(c=c.proto);i.push(this);try{s=s&&String(s),a=a&&String(a)}finally{i.pop()}return a?s+": "+a:String(s)}return null!==this.data?String(this.data):"[object "+this.class+"]"},Dt.Object.prototype.valueOf=function(){return void 0===this.data||null===this.data||this.data instanceof RegExp?this:this.data instanceof Date?this.data.valueOf():this.data},Dt.prototype.stepArrayExpression=function(e,t,r){var o=r.elements,n=t.n_||0;for(t.array_?(this.setProperty(t.array_,n,t.value),n++):(t.array_=this.createArray(),t.array_.properties.length=o.length);n<o.length;){if(o[n])return t.n_=n,new Dt.State(o[n],t.scope);n++}e.pop(),e[e.length-1].value=t.array_},Dt.prototype.stepAssignmentExpression=function(e,t,r){if(!t.doneLeft_){t.doneLeft_=!0;var o=new Dt.State(r.left,t.scope);return o.components=!0,o}if(!t.doneRight_){if(t.leftReference_||(t.leftReference_=t.value),t.doneGetter_&&(t.leftValue_=t.value),!t.doneGetter_&&"="!==r.operator){var n=this.getValue(t.leftReference_);if(t.leftValue_=n,this.getterStep_){t.doneGetter_=!0;var i=n;return this.createGetter_(i,t.leftReference_)}}return t.doneRight_=!0,"="===r.operator&&"Identifier"===r.left.type&&(t.destinationName=r.left.name),new Dt.State(r.right,t.scope)}if(t.doneSetter_)return e.pop(),void(e[e.length-1].value=t.setterValue_);var s=t.leftValue_,a=t.value;switch(r.operator){case"=":s=a;break;case"+=":s+=a;break;case"-=":s-=a;break;case"*=":s*=a;break;case"/=":s/=a;break;case"%=":s%=a;break;case"<<=":s<<=a;break;case">>=":s>>=a;break;case">>>=":s>>>=a;break;case"&=":s&=a;break;case"^=":s^=a;break;case"|=":s|=a;break;default:throw SyntaxError("Unknown assignment expression: "+r.operator)}var c=this.setValue(t.leftReference_,s);if(c)return t.doneSetter_=!0,t.setterValue_=s,this.createSetter_(c,t.leftReference_,s);e.pop(),e[e.length-1].value=s},Dt.prototype.stepBinaryExpression=function(e,t,r){if(!t.doneLeft_)return t.doneLeft_=!0,new Dt.State(r.left,t.scope);if(!t.doneRight_)return t.doneRight_=!0,t.leftValue_=t.value,new Dt.State(r.right,t.scope);e.pop();var o,n=t.leftValue_,i=t.value;switch(r.operator){case"==":o=n==i;break;case"!=":o=n!=i;break;case"===":o=n===i;break;case"!==":o=n!==i;break;case">":o=n>i;break;case">=":o=n>=i;break;case"<":o=n<i;break;case"<=":o=n<=i;break;case"+":o=n+i;break;case"-":o=n-i;break;case"*":o=n*i;break;case"/":o=n/i;break;case"%":o=n%i;break;case"&":o=n&i;break;case"|":o=n|i;break;case"^":o=n^i;break;case"<<":o=n<<i;break;case">>":o=n>>i;break;case">>>":o=n>>>i;break;case"in":i instanceof Dt.Object||this.throwException(this.TYPE_ERROR,"'in' expects an object, not '"+i+"'"),o=this.hasProperty(i,n);break;case"instanceof":this.isa(i,this.FUNCTION)||this.throwException(this.TYPE_ERROR,"Right-hand side of instanceof is not an object"),o=n instanceof Dt.Object&&this.isa(n,i);break;default:throw SyntaxError("Unknown binary operator: "+r.operator)}e[e.length-1].value=o},Dt.prototype.stepBlockStatement=function(e,t,r){var o=t.n_||0,n=r.body[o];if(n)return t.n_=o+1,new Dt.State(n,t.scope);e.pop()},Dt.prototype.stepBreakStatement=function(e,t,r){var o=r.label&&r.label.name;this.unwind(Dt.Completion.BREAK,void 0,o)},Dt.prototype.stepCallExpression=function(e,t,o){if(!t.doneCallee_){t.doneCallee_=1;var n=new Dt.State(o.callee,t.scope);return n.components=!0,n}if(1===t.doneCallee_){t.doneCallee_=2;var i=t.value;if(Array.isArray(i)){if(t.func_=this.getValue(i),i[0]===Dt.SCOPE_REFERENCE?t.directEval_="eval"===i[1]:t.funcThis_=i[0],i=t.func_,this.getterStep_)return t.doneCallee_=1,this.createGetter_(i,t.value)}else t.func_=i;t.arguments_=[],t.n_=0}if(i=t.func_,!t.doneArgs_){if(0!==t.n_&&t.arguments_.push(t.value),o.arguments[t.n_])return new Dt.State(o.arguments[t.n_++],t.scope);if("NewExpression"===o.type){if(i instanceof Dt.Object&&!i.illegalConstructor||this.throwException(this.TYPE_ERROR,i+" is not a constructor"),i===this.ARRAY)t.funcThis_=this.createArray();else{var s=i.properties.prototype;"object"==typeof s&&null!==s||(s=this.OBJECT_PROTO),t.funcThis_=this.createObjectProto(s)}t.isConstructor=!0}else void 0===t.funcThis_&&(t.funcThis_=t.scope.strict?void 0:this.globalObject);t.doneArgs_=!0}if(t.cb_&&t.cb_.force_&&(t.doneExec_=!1,t.cb_.force_=!1),t.doneExec_)e.pop(),t.isConstructor&&"object"!=typeof t.value?e[e.length-1].value=t.funcThis_:e[e.length-1].value=t.value;else{t.doneExec_=!0,i instanceof Dt.Object||this.throwException(this.TYPE_ERROR,i+" is not a function");var a=i.node;if(a){for(var c=this.createScope(a.body,i.parentScope),p=0;p<a.params.length;p++){var l=a.params[p].name,u=t.arguments_.length>p?t.arguments_[p]:void 0;this.setProperty(c.object,l,u)}var h=this.createArray();for(p=0;p<t.arguments_.length;p++)this.setProperty(h,p,t.arguments_[p]);this.setProperty(c.object,"arguments",h);var f=a.id&&a.id.name;return f&&this.setProperty(c.object,f,i),c.strict||(t.funcThis_=this.boxThis_(t.funcThis_)),this.setProperty(c.object,"this",t.funcThis_,Dt.READONLY_DESCRIPTOR),t.value=void 0,new Dt.State(a.body,c)}if(i.eval){var d=t.arguments_[0];if("string"==typeof d){try{var y=r.parse(String(d),Dt.PARSE_OPTIONS)}catch(e){this.throwException(this.SYNTAX_ERROR,"Invalid code: "+e.message)}var E=new this.nodeConstructor({options:{}});return E.type="EvalProgram_",E.body=y.body,Dt.stripLocations_(E,o.start,o.end),(c=t.directEval_?t.scope:this.globalScope).strict?c=this.createScope(y,c):this.populateScope_(y,c),this.value=void 0,new Dt.State(E,c)}t.value=d}else{if(i.nativeFunc)return t.scope.strict||(t.funcThis_=this.boxThis_(t.funcThis_)),void this.handleNativeResult_(t,c,t.cb_?t.cb_.doNext_():i.nativeFunc.apply(t.funcThis_,t.arguments_));if(i.asyncFunc){var v=this,g=function(e){t.value=e,v.paused_=!1,v.handleNativeResult_(t,c,e)};if(this.paused_=!0,t.cb_)return void t.cb_.doNext_(g);var b=i.asyncFunc.length-1,_=t.arguments_.concat(new Array(b)).slice(0,b);return _.push(g),t.scope.strict||(t.funcThis_=this.boxThis_(t.funcThis_)),void i.asyncFunc.apply(t.funcThis_,_)}this.throwException(this.TYPE_ERROR,i.class+" is not callable")}}},Dt.prototype.stepCatchClause=function(e,t,r){if(!t.done_){t.done_=!0;var o=this.createSpecialScope(t.scope);return this.setProperty(o.object,r.param.name,t.throwValue),new Dt.State(r.body,o)}e.pop()},Dt.prototype.stepConditionalExpression=function(e,t,r){var o=t.mode_||0;if(0===o)return t.mode_=1,new Dt.State(r.test,t.scope);if(1===o){t.mode_=2;var n=Boolean(t.value);if(n&&r.consequent)return new Dt.State(r.consequent,t.scope);if(!n&&r.alternate)return new Dt.State(r.alternate,t.scope);this.value=void 0}e.pop(),"ConditionalExpression"===r.type&&(e[e.length-1].value=t.value)},Dt.prototype.stepContinueStatement=function(e,t,r){var o=r.label&&r.label.name;this.unwind(Dt.Completion.CONTINUE,void 0,o)},Dt.prototype.stepDebuggerStatement=function(e,t,r){e.pop()},Dt.prototype.stepDoWhileStatement=function(e,t,r){if("DoWhileStatement"===r.type&&void 0===t.test_&&(t.value=!0,t.test_=!0),!t.test_)return t.test_=!0,new Dt.State(r.test,t.scope);if(t.value){if(r.body)return t.test_=!1,t.isLoop=!0,new Dt.State(r.body,t.scope)}else e.pop()},Dt.prototype.stepEmptyStatement=function(e,t,r){e.pop()},Dt.prototype.stepEvalProgram_=function(e,t,r){var o=t.n_||0,n=r.body[o];if(n)return t.n_=o+1,new Dt.State(n,t.scope);e.pop(),e[e.length-1].value=this.value},Dt.prototype.stepCallExpressionFunc_=function(e,t,r){var o=r.cb_,n=o.queued_;if(!t.done_){t.done_=!0;var i=new this.nodeConstructor({options:{}});i.type="CallExpression";var s=new Dt.State(i,r.scope_||t.scope);return s.doneCallee_=!0,s.funcThis_=r.funcThis_,s.func_=r.func_,s.doneArgs_=!0,s.arguments_=r.arguments_,t.catch_=o.catch_,s}if(n&&o.handlers_.length&&!t.throw_){var a=o.handlers_.shift();this.handleNativeResult_(t,r.funcThis_,a(t.value))}else{if(t.catch_&&t.throw_){if(n)return this.handleNativeResult_(t,r.funcThis_,t.catch_(t.throw_)),void(t.catch_=null);o.stateless_=!0,o.handlers_=[t.catch_],o.value=t.throw_,o.force_=!0}e.pop(),1===this.stateStack.length&&(this.value=t.value)}},Dt.prototype.stepExpressionStatement=function(e,t,r){if(!t.done_)return t.done_=!0,new Dt.State(r.expression,t.scope);e.pop(),this.value=t.value},Dt.prototype.stepForInStatement=function(e,t,r){if(!t.doneInit_&&(t.doneInit_=!0,r.left.declarations&&r.left.declarations[0].init))return t.scope.strict&&this.throwException(this.SYNTAX_ERROR,"for-in loop variable declaration may not have an initializer."),new Dt.State(r.left,t.scope);if(!t.doneObject_)return t.doneObject_=!0,t.variable_||(t.variable_=t.value),new Dt.State(r.right,t.scope);if(t.isLoop||(t.isLoop=!0,t.object_=t.value,t.visited_=Object.create(null)),void 0===t.name_)e:for(;;){if(t.object_ instanceof Dt.Object){for(t.props_||(t.props_=Object.getOwnPropertyNames(t.object_.properties));void 0!==(o=t.props_.shift());)if(Object.prototype.hasOwnProperty.call(t.object_.properties,o)&&!t.visited_[o]&&(t.visited_[o]=!0,Object.prototype.propertyIsEnumerable.call(t.object_.properties,o))){t.name_=o;break e}}else if(null!==t.object_&&void 0!==t.object_)for(t.props_||(t.props_=Object.getOwnPropertyNames(t.object_));;){var o;if(void 0===(o=t.props_.shift()))break;if(t.visited_[o]=!0,Object.prototype.propertyIsEnumerable.call(t.object_,o)){t.name_=o;break e}}if(t.object_=this.getPrototype(t.object_),t.props_=null,null===t.object_)return void e.pop()}if(!t.doneVariable_){t.doneVariable_=!0;var n=r.left;if("VariableDeclaration"!==n.type){t.variable_=null;var i=new Dt.State(n,t.scope);return i.components=!0,i}t.variable_=[Dt.SCOPE_REFERENCE,n.declarations[0].id.name]}if(t.variable_||(t.variable_=t.value),!t.doneSetter_){t.doneSetter_=!0;var s=t.name_,a=this.setValue(t.variable_,s);if(a)return this.createSetter_(a,t.variable_,s)}return t.name_=void 0,t.doneVariable_=!1,t.doneSetter_=!1,r.body?new Dt.State(r.body,t.scope):void 0},Dt.prototype.stepForStatement=function(e,t,r){var o=t.mode_||0;if(0===o){if(t.mode_=1,r.init)return new Dt.State(r.init,t.scope)}else if(1===o){if(t.mode_=2,r.test)return new Dt.State(r.test,t.scope)}else if(2===o){if(t.mode_=3,!r.test||t.value)return t.isLoop=!0,new Dt.State(r.body,t.scope);e.pop()}else if(3===o&&(t.mode_=1,r.update))return new Dt.State(r.update,t.scope)},Dt.prototype.stepFunctionDeclaration=function(e,t,r){e.pop()},Dt.prototype.stepFunctionExpression=function(e,t,r){e.pop(),(t=e[e.length-1]).value=this.createFunction(r,t.scope,t.destinationName)},Dt.prototype.stepIdentifier=function(e,t,r){if(e.pop(),t.components)e[e.length-1].value=[Dt.SCOPE_REFERENCE,r.name];else{var o=this.getValueFromScope(r.name);if(this.getterStep_){for(var n=t.scope;n!==this.globalScope&&!this.hasProperty(n,r.name);)n=n.parentScope;var i=o;return this.createGetter_(i,this.globalObject)}e[e.length-1].value=o}},Dt.prototype.stepIfStatement=Dt.prototype.stepConditionalExpression,Dt.prototype.stepLabeledStatement=function(e,t,r){e.pop();var o=t.labels||[];o.push(r.label.name);var n=new Dt.State(r.body,t.scope);return n.labels=o,n},Dt.prototype.stepLiteral=function(e,t,r){e.pop();var o=r.value;if(o instanceof RegExp){var n=this.createObjectProto(this.REGEXP_PROTO);this.populateRegExp(n,o),o=n}e[e.length-1].value=o},Dt.prototype.stepLogicalExpression=function(e,t,r){if("&&"!==r.operator&&"||"!==r.operator)throw SyntaxError("Unknown logical operator: "+r.operator);if(!t.doneLeft_)return t.doneLeft_=!0,new Dt.State(r.left,t.scope);if(t.doneRight_)e.pop(),e[e.length-1].value=t.value;else{if(!("&&"===r.operator&&!t.value||"||"===r.operator&&t.value))return t.doneRight_=!0,new Dt.State(r.right,t.scope);e.pop(),e[e.length-1].value=t.value}},Dt.prototype.stepMemberExpression=function(e,t,r){if(!t.doneObject_)return t.doneObject_=!0,new Dt.State(r.object,t.scope);var o;if(r.computed){if(!t.doneProperty_)return t.object_=t.value,t.doneProperty_=!0,new Dt.State(r.property,t.scope);o=t.value}else t.object_=t.value,o=r.property.name;if(e.pop(),t.components)e[e.length-1].value=[t.object_,o];else{var n=this.getProperty(t.object_,o);if(this.getterStep_){var i=n;return this.createGetter_(i,t.object_)}e[e.length-1].value=n}},Dt.prototype.stepNewExpression=Dt.prototype.stepCallExpression,Dt.prototype.stepObjectExpression=function(e,t,r){var o=t.n_||0,n=r.properties[o];if(t.object_){var i=t.destinationName;t.properties_[i]||(t.properties_[i]={}),t.properties_[i][n.kind]=t.value,t.n_=++o,n=r.properties[o]}else t.object_=this.createObjectProto(this.OBJECT_PROTO),t.properties_=Object.create(null);if(n){if("Identifier"===(s=n.key).type)i=s.name;else{if("Literal"!==s.type)throw SyntaxError("Unknown object structure: "+s.type);i=s.value}return t.destinationName=i,new Dt.State(n.value,t.scope)}for(var s in t.properties_){var a=t.properties_[s];if("get"in a||"set"in a){var c={configurable:!0,enumerable:!0,get:a.get,set:a.set};this.setProperty(t.object_,s,Dt.VALUE_IN_DESCRIPTOR,c)}else this.setProperty(t.object_,s,a.init)}e.pop(),e[e.length-1].value=t.object_},Dt.prototype.stepProgram=function(e,t,r){var o=r.body.shift();if(o)return t.done=!1,new Dt.State(o,t.scope);t.done=!0},Dt.prototype.stepReturnStatement=function(e,t,r){if(r.argument&&!t.done_)return t.done_=!0,new Dt.State(r.argument,t.scope);this.unwind(Dt.Completion.RETURN,t.value,void 0)},Dt.prototype.stepSequenceExpression=function(e,t,r){var o=t.n_||0,n=r.expressions[o];if(n)return t.n_=o+1,new Dt.State(n,t.scope);e.pop(),e[e.length-1].value=t.value},Dt.prototype.stepSwitchStatement=function(e,t,r){if(!t.test_)return t.test_=1,new Dt.State(r.discriminant,t.scope);for(1===t.test_&&(t.test_=2,t.switchValue_=t.value,t.defaultCase_=-1);;){var o=t.index_||0,n=r.cases[o];if(t.matched_||!n||n.test)if(n||t.matched_||-1===t.defaultCase_){if(!n)return void e.pop();if(!t.matched_&&!t.tested_&&n.test)return t.tested_=!0,new Dt.State(n.test,t.scope);if(t.matched_||t.value===t.switchValue_){t.matched_=!0;var i=t.n_||0;if(n.consequent[i])return t.isSwitch=!0,t.n_=i+1,new Dt.State(n.consequent[i],t.scope)}t.tested_=!1,t.n_=0,t.index_=o+1}else t.matched_=!0,t.index_=t.defaultCase_;else t.defaultCase_=o,t.index_=o+1}},Dt.prototype.stepThisExpression=function(e,t,r){e.pop(),e[e.length-1].value=this.getValueFromScope("this")},Dt.prototype.stepThrowStatement=function(e,t,r){if(!t.done_)return t.done_=!0,new Dt.State(r.argument,t.scope);this.throwException(t.value)},Dt.prototype.stepTryStatement=function(e,t,r){if(!t.doneBlock_)return t.doneBlock_=!0,new Dt.State(r.block,t.scope);if(t.cv&&t.cv.type===Dt.Completion.THROW&&!t.doneHandler_&&r.handler){t.doneHandler_=!0;var o=new Dt.State(r.handler,t.scope);return o.throwValue=t.cv.value,t.cv=void 0,o}if(!t.doneFinalizer_&&r.finalizer)return t.doneFinalizer_=!0,new Dt.State(r.finalizer,t.scope);e.pop(),t.cv&&this.unwind(t.cv.type,t.cv.value,t.cv.label)},Dt.prototype.stepUnaryExpression=function(e,t,r){if(!t.done_){t.done_=!0;var o=new Dt.State(r.argument,t.scope);return o.components="delete"===r.operator,o}e.pop();var n=t.value;if("-"===r.operator)n=-n;else if("+"===r.operator)n=+n;else if("!"===r.operator)n=!n;else if("~"===r.operator)n=~n;else if("delete"===r.operator){var i=!0;if(Array.isArray(n)){var s=n[0];s===Dt.SCOPE_REFERENCE&&(s=t.scope);var a=String(n[1]);try{delete s.properties[a]}catch(e){t.scope.strict?this.throwException(this.TYPE_ERROR,"Cannot delete property '"+a+"' of '"+s+"'"):i=!1}}n=i}else if("typeof"===r.operator)n=n&&"Function"===n.class?"function":typeof n;else{if("void"!==r.operator)throw SyntaxError("Unknown unary operator: "+r.operator);n=void 0}e[e.length-1].value=n},Dt.prototype.stepUpdateExpression=function(e,t,r){if(!t.doneLeft_){t.doneLeft_=!0;var o=new Dt.State(r.argument,t.scope);return o.components=!0,o}if(t.leftSide_||(t.leftSide_=t.value),t.doneGetter_&&(t.leftValue_=t.value),!t.doneGetter_){var n=this.getValue(t.leftSide_);if(t.leftValue_=n,this.getterStep_){t.doneGetter_=!0;var i=n;return this.createGetter_(i,t.leftSide_)}}if(t.doneSetter_)return e.pop(),void(e[e.length-1].value=t.setterValue_);var s;if(n=Number(t.leftValue_),"++"===r.operator)s=n+1;else{if("--"!==r.operator)throw SyntaxError("Unknown update expression: "+r.operator);s=n-1}var a=r.prefix?s:n,c=this.setValue(t.leftSide_,s);if(c)return t.doneSetter_=!0,t.setterValue_=a,this.createSetter_(c,t.leftSide_,s);e.pop(),e[e.length-1].value=a},Dt.prototype.stepVariableDeclaration=function(e,t,r){var o=r.declarations,n=t.n_||0,i=o[n];for(t.init_&&i&&(this.setValueToScope(i.id.name,t.value),t.init_=!1,i=o[++n]);i;){if(i.init)return t.n_=n,t.init_=!0,t.destinationName=i.id.name,new Dt.State(i.init,t.scope);i=o[++n]}e.pop()},Dt.prototype.stepWithStatement=function(e,t,r){if(!t.doneObject_)return t.doneObject_=!0,new Dt.State(r.object,t.scope);if(!t.doneBody_){t.doneBody_=!0;var o=this.createSpecialScope(t.scope,t.value);return new Dt.State(r.body,o)}e.pop()},Dt.prototype.stepWhileStatement=Dt.prototype.stepDoWhileStatement,Dt.prototype.step=Dt.prototype.step,Dt.prototype.run=Dt.prototype.run,Dt.prototype.appendCode=Dt.prototype.appendCode,Dt.prototype.createObject=Dt.prototype.createObject,Dt.prototype.createObjectProto=Dt.prototype.createObjectProto,Dt.prototype.createAsyncFunction=Dt.prototype.createAsyncFunction,Dt.prototype.createNativeFunction=Dt.prototype.createNativeFunction,Dt.prototype.getProperty=Dt.prototype.getProperty,Dt.prototype.setProperty=Dt.prototype.setProperty,Dt.prototype.nativeToPseudo=Dt.prototype.nativeToPseudo,Dt.prototype.pseudoToNative=Dt.prototype.pseudoToNative,Dt.prototype.callFunction=Dt.prototype.callFunction,Dt.prototype.queueFunction=Dt.prototype.queueFunction,Dt.prototype.createThrowable=Dt.prototype.createThrowable;var Bt=[],Mt=0;document.addEventListener("DOMContentLoaded",(function(){document.addEventListener("click",(function(e){if(e.target.matches(".run-button")){e.preventDefault();var t,r=document.getElementById("code");null!==r&&(t=r.value,new Dt(t,(function(e,t){e.setProperty(t,"callA",e.createNativeFunction((function(t,r){setTimeout((function(){try{var r=function(){throw"script error"}();e.queueFunction(t,void 0,r),e.run()}catch(r){e.queueFunction(t,void 0,r),e.run()}}),100)}))),e.setProperty(t,"callF",e.createNativeFunction((function(t,r){return e.callFunction(t,void 0,"sdasd","dsdsd")}))),e.setProperty(t,"log",e.nativeToPseudo((function(e){console.log(e)}))),e.setProperty(t,"setTimeout",e.createNativeFunction((function(t,r){var o=++Mt;return Bt[o]=setTimeout((function(){Bt[o]&&(delete Bt[o],e.queueFunction(t),e.run())}),r),o}))),e.setProperty(t,"clearTimeout",e.createNativeFunction((function(e){clearTimeout(Bt[e]),delete Bt[e]})))})).runAll((function(e){return console.log("Some error",e)}),(function(){return console.log("Finished")})))}}),!1)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,