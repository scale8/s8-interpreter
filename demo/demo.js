(()=>{var e={790:()=>{}},t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={exports:{}};return e[n](o,o.exports,r),o.exports}(()=>{"use strict";const e={};let t,n,o,i;e.version="0.4.1",e.parse=function(e,r){return n=String(e),o=n.length,s(r),Je(),function(e){b=_=p,t.locations&&(R=new Xe),O=N=null,m=[],Ke();const r=e||pt();let n=!0;for(e||(r.body=[]);d!==A;){const e=Rt();r.body.push(e),n&&ht(e)&&at(!0),n=!1}return lt(r,"Program")}(t.program)};const a=e.defaultOptions={ecmaVersion:5,strictSemicolons:!1,allowTrailingCommas:!0,forbidReserved:!1,locations:!1,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null};function s(e){t=e||{};for(let e in a)Object.prototype.hasOwnProperty.call(t,e)||(t[e]=a[e]);i=t.sourceFile||null}const c=e.getLineInfo=function(e,t){for(var r=1,n=0;;){Ge.lastIndex=n;const o=Ge.exec(e);if(!(o&&o.index<t))break;++r,n=o.index+o[0].length}return{line:r,column:t-n}};var p,u,l,h,f,d,y,E,v,g;let b,_,R,O,m,N;function P(e,t){const r=c(n,e);t+=" ("+r.line+":"+r.column+")";const o=new SyntaxError(t);throw o.pos=e,o.loc=r,o.raisedAt=p,o}e.tokenize=function(e,r){n=String(e),o=n.length,s(r),Je();const i={};function a(e){return Ke(e),i.start=u,i.end=l,i.startLoc=h,i.endLoc=f,i.type=d,i.value=y,i}return a.jumpTo=function(e,r){if(p=e,t.locations){let t;for(v=1,g=Ge.lastIndex=0;(t=Ge.exec(n))&&t.index<e;)++v,g=t.index+t[0].length}E=r,ze()},a};const T=[],S={type:"num"},w={type:"regexp"},C={type:"string"},x={type:"name"},A={type:"eof"},k={keyword:"break"},j={keyword:"case",beforeExpr:!0},I={keyword:"catch"},F={keyword:"continue"},U={keyword:"debugger"},L={keyword:"default"},D={keyword:"do",isLoop:!0},B={keyword:"else",beforeExpr:!0},M={keyword:"finally"},G={keyword:"for",isLoop:!0},Y={keyword:"function"},V={keyword:"if"},X={keyword:"return",beforeExpr:!0},J={keyword:"switch"},W={keyword:"throw",beforeExpr:!0},q={keyword:"try"},H={keyword:"var"},z={keyword:"while",isLoop:!0},K={keyword:"with"},$={keyword:"new",beforeExpr:!0},Q={keyword:"this"},Z={keyword:"null",atomValue:null},ee={keyword:"true",atomValue:!0},te={keyword:"false",atomValue:!1},re={keyword:"in",binop:7,beforeExpr:!0},ne={break:k,case:j,catch:I,continue:F,debugger:U,default:L,do:D,else:B,finally:M,for:G,function:Y,if:V,return:X,switch:J,throw:W,try:q,var:H,while:z,with:K,null:Z,true:ee,false:te,new:$,in:re,instanceof:{keyword:"instanceof",binop:7,beforeExpr:!0},this:Q,typeof:{keyword:"typeof",prefix:!0,beforeExpr:!0},void:{keyword:"void",prefix:!0,beforeExpr:!0},delete:{keyword:"delete",prefix:!0,beforeExpr:!0}},oe={type:"[",beforeExpr:!0},ie={type:"]"},ae={type:"{",beforeExpr:!0},se={type:"}"},ce={type:"(",beforeExpr:!0},pe={type:")"},ue={type:",",beforeExpr:!0},le={type:";",beforeExpr:!0},he={type:":",beforeExpr:!0},fe={type:"."},de={type:"?",beforeExpr:!0},ye={binop:10,beforeExpr:!0},Ee={isAssign:!0,beforeExpr:!0},ve={isAssign:!0,beforeExpr:!0},ge={postfix:!0,prefix:!0,isUpdate:!0},be={prefix:!0,beforeExpr:!0},_e={binop:1,beforeExpr:!0},Re={binop:2,beforeExpr:!0},Oe={binop:3,beforeExpr:!0},me={binop:4,beforeExpr:!0},Ne={binop:5,beforeExpr:!0},Pe={binop:6,beforeExpr:!0},Te={binop:7,beforeExpr:!0},Se={binop:8,beforeExpr:!0},we={binop:9,prefix:!0,beforeExpr:!0},Ce={binop:10,beforeExpr:!0};e.tokTypes={bracketL:oe,bracketR:ie,braceL:ae,braceR:se,parenL:ce,parenR:pe,comma:ue,semi:le,colon:he,dot:fe,question:de,slash:ye,eq:Ee,name:x,eof:A,num:S,regexp:w,string:C};for(let t in ne)e.tokTypes["_"+t]=ne[t];function xe(e){e=e.split(" ");let t="";const r=[];e:for(var n=0;n<e.length;++n){for(let t=0;t<r.length;++t)if(r[t][0].length==e[n].length){r[t].push(e[n]);continue e}r.push([e[n]])}function o(e){if(1==e.length)return t+="return str === "+JSON.stringify(e[0])+";";t+="switch(str){";for(let r=0;r<e.length;++r)t+="case "+JSON.stringify(e[r])+":";t+="return true}return false;"}if(r.length>3){for(r.sort((function(e,t){return t.length-e.length})),t+="switch(str.length){",n=0;n<r.length;++n){const e=r[n];t+="case "+e[0].length+":",o(e)}t+="}"}else o(e);return new Function("str",t)}const Ae=xe("abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile"),ke=xe("class enum extends super const export import"),je=xe("implements interface let package private protected public static yield"),Ie=xe("eval arguments"),Fe=xe("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this"),Ue=/[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/,Le="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",De=new RegExp("["+Le+"]"),Be=new RegExp("["+Le+"̀-ͯ҃-֑҇-ׇֽֿׁׂׅׄؐ-ؚؠ-ىٲ-ۓۧ-ۨۻ-ۼܰ-݊ࠀ-ࠔࠛ-ࠣࠥ-ࠧࠩ-࠭ࡀ-ࡗࣤ-ࣾऀ-ःऺ-़ा-ॏ॑-ॗॢ-ॣ०-९ঁ-ঃ়া-ৄেৈৗয়-ৠਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢ-ૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୟ-ୠ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఁ-ఃె-ైొ-్ౕౖౢ-ౣ౦-౯ಂಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢ-ೣ೦-೯ംഃെ-ൈൗൢ-ൣ൦-൯ංඃ්ා-ුූෘ-ෟෲෳิ-ฺเ-ๅ๐-๙ິ-ູ່-ໍ໐-໙༘༙༠-༩༹༵༷ཁ-ཇཱ-྄྆-྇ྍ-ྗྙ-ྼ࿆က-ဩ၀-၉ၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟ᜎ-ᜐᜠ-ᜰᝀ-ᝐᝲᝳក-ឲ៝០-៩᠋-᠍᠐-᠙ᤠ-ᤫᤰ-᤻ᥑ-ᥭᦰ-ᧀᧈ-ᧉ᧐-᧙ᨀ-ᨕᨠ-ᩓ᩠-᩿᩼-᪉᪐-᪙ᭆ-ᭋ᭐-᭙᭫-᭳᮰-᮹᯦-᯳ᰀ-ᰢ᱀-᱉ᱛ-ᱽ᳐-᳒ᴀ-ᶾḁ-ἕ‌‍‿⁀⁔⃐-⃥⃜⃡-⃰ⶁ-ⶖⷠ-ⷿ〡-〨゙゚Ꙁ-ꙭꙴ-꙽ꚟ꛰-꛱ꟸ-ꠀ꠆ꠋꠣ-ꠧꢀ-ꢁꢴ-꣄꣐-꣙ꣳ-ꣷ꤀-꤉ꤦ-꤭ꤰ-ꥅꦀ-ꦃ꦳-꧀ꨀ-ꨧꩀ-ꩁꩌ-ꩍ꩐-꩙ꩻꫠ-ꫩꫲ-ꫳꯀ-ꯡ꯬꯭꯰-꯹ﬠ-ﬨ︀-️︠-︦︳︴﹍-﹏０-９＿]"),Me=/[\n\r\u2028\u2029]/;var Ge=/\r\n|[\n\r\u2028\u2029]/g;const Ye=e.isIdentifierStart=function(e){return e<65?36===e:e<91||(e<97?95===e:e<123||e>=170&&De.test(String.fromCharCode(e)))},Ve=e.isIdentifierChar=function(e){return e<48?36===e:e<58||!(e<65)&&(e<91||(e<97?95===e:e<123||e>=170&&Be.test(String.fromCharCode(e))))};function Xe(){this.line=v,this.column=p-g}function Je(){v=1,p=g=0,E=!0,ze()}function We(e,r){l=p,t.locations&&(f=new Xe),d=e,ze(),y=r,E=e.beforeExpr}function qe(){const e=t.onComment&&t.locations&&new Xe,r=p,o=n.indexOf("*/",p+=2);if(-1===o&&P(p-2,"Unterminated comment"),p=o+2,t.locations){let e;for(Ge.lastIndex=r;(e=Ge.exec(n))&&e.index<p;)++v,g=e.index+e[0].length}t.onComment&&t.onComment(!0,n.slice(r+2,o),r,p,e,t.locations&&new Xe)}function He(){const e=p,r=t.onComment&&t.locations&&new Xe;let i=n.charCodeAt(p+=2);for(;p<o&&10!==i&&13!==i&&8232!==i&&8233!==i;)++p,i=n.charCodeAt(p);t.onComment&&t.onComment(!1,n.slice(e+2,p),e,p,r,t.locations&&new Xe)}function ze(){for(;p<o;){const r=n.charCodeAt(p);if(32===r)++p;else if(13===r)++p,10===(e=n.charCodeAt(p))&&++p,t.locations&&(++v,g=p);else if(10===r||8232===r||8233===r)++p,t.locations&&(++v,g=p);else if(r>8&&r<14)++p;else if(47===r){var e;if(42===(e=n.charCodeAt(p+1)))qe();else{if(47!==e)break;He()}}else if(160===r)++p;else{if(!(r>=5760&&Ue.test(String.fromCharCode(r))))break;++p}}}function Ke(e){if(e?p=u+1:u=p,t.locations&&(h=new Xe),e)return Qe();if(p>=o)return We(A);const r=n.charCodeAt(p);if(Ye(r)||92===r)return ot();const i=function(e){switch(e){case 46:return function(){const e=n.charCodeAt(p+1);return e>=48&&e<=57?et(!0):(++p,We(fe))}();case 40:return++p,We(ce);case 41:return++p,We(pe);case 59:return++p,We(le);case 44:return++p,We(ue);case 91:return++p,We(oe);case 93:return++p,We(ie);case 123:return++p,We(ae);case 125:return++p,We(se);case 58:return++p,We(he);case 63:return++p,We(de);case 48:const r=n.charCodeAt(p+1);if(120===r||88===r)return function(){p+=2;const e=Ze(16);return null==e&&P(u+2,"Expected hexadecimal number"),Ye(n.charCodeAt(p))&&P(p,"Identifier directly after number"),We(S,e)}();case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return et(!1);case 34:case 39:return function(e){p++;let r="";for(;;){p>=o&&P(u,"Unterminated string constant");let i=n.charCodeAt(p);if(i===e)return++p,We(C,r);if(92===i){i=n.charCodeAt(++p);let e=/^[0-7]+/.exec(n.slice(p,p+3));for(e&&(e=e[0]);e&&parseInt(e,8)>255;)e=e.slice(0,-1);if("0"===e&&(e=null),++p,e)N&&P(p-2,"Octal literal in strict mode"),r+=String.fromCharCode(parseInt(e,8)),p+=e.length-1;else switch(i){case 110:r+="\n";break;case 114:r+="\r";break;case 120:r+=String.fromCharCode(tt(2));break;case 117:r+=String.fromCharCode(tt(4));break;case 85:r+=String.fromCharCode(tt(8));break;case 116:r+="\t";break;case 98:r+="\b";break;case 118:r+="\v";break;case 102:r+="\f";break;case 48:r+="\0";break;case 13:10===n.charCodeAt(p)&&++p;case 10:t.locations&&(g=p,++v);break;default:r+=String.fromCharCode(i)}}else 13!==i&&10!==i&&8232!==i&&8233!==i||P(u,"Unterminated string constant"),r+=String.fromCharCode(i),++p}}(e);case 47:return function(){const e=n.charCodeAt(p+1);return E?(++p,Qe()):61===e?$e(ve,2):$e(ye,1)}();case 37:case 42:return 61===n.charCodeAt(p+1)?$e(ve,2):$e(Ce,1);case 124:case 38:return function(e){const t=n.charCodeAt(p+1);return t===e?$e(124===e?_e:Re,2):61===t?$e(ve,2):$e(124===e?Oe:Ne,1)}(e);case 94:return 61===n.charCodeAt(p+1)?$e(ve,2):$e(me,1);case 43:case 45:return function(e){const t=n.charCodeAt(p+1);return t===e?45==t&&62==n.charCodeAt(p+2)&&Me.test(n.slice(_,p))?(p+=3,He(),ze(),Ke()):$e(ge,2):61===t?$e(ve,2):$e(we,1)}(e);case 60:case 62:return function(e){const t=n.charCodeAt(p+1);let r=1;return t===e?(r=62===e&&62===n.charCodeAt(p+2)?3:2,61===n.charCodeAt(p+r)?$e(ve,r+1):$e(Se,r)):33==t&&60==e&&45==n.charCodeAt(p+2)&&45==n.charCodeAt(p+3)?(p+=4,He(),ze(),Ke()):(61===t&&(r=61===n.charCodeAt(p+2)?3:2),$e(Te,r))}(e);case 61:case 33:return function(e){return 61===n.charCodeAt(p+1)?$e(Pe,61===n.charCodeAt(p+2)?3:2):$e(61===e?Ee:be,1)}(e);case 126:return $e(be,1)}return!1}(r);if(!1===i){const e=String.fromCharCode(r);if("\\"===e||De.test(e))return ot();P(p,"Unexpected character '"+e+"'")}return i}function $e(e,t){const r=n.slice(p,p+t);p+=t,We(e,r)}function Qe(){for(var e,t,r=p;;){p>=o&&P(r,"Unterminated regular expression");const i=n.charAt(p);if(Me.test(i)&&P(r,"Unterminated regular expression"),e)e=!1;else{if("["===i)t=!0;else if("]"===i&&t)t=!1;else if("/"===i&&!t)break;e="\\"===i}++p}var i=n.slice(r,p);++p;const a=nt();return a&&!/^[gmsiy]*$/.test(a)&&P(r,"Invalid regexp flag"),We(w,new RegExp(i,a))}function Ze(e,t){const r=p;let o=0,i=0;const a=null==t?1/0:t;for(;i<a;++i){const t=n.charCodeAt(p);let r;if(r=t>=97?t-97+10:t>=65?t-65+10:t>=48&&t<=57?t-48:1/0,r>=e)break;++p,o=o*e+r}return p===r||null!=t&&p-r!==t?null:o}function et(e){const t=p;let r=!1;const o=48===n.charCodeAt(p);e||null!==Ze(10)||P(t,"Invalid number"),46===n.charCodeAt(p)&&(++p,Ze(10),r=!0);let i=n.charCodeAt(p);69!==i&&101!==i||(i=n.charCodeAt(++p),43!==i&&45!==i||++p,null===Ze(10)&&P(t,"Invalid number"),r=!0),Ye(n.charCodeAt(p))&&P(p,"Identifier directly after number");const a=n.slice(t,p);let s;return r?s=parseFloat(a):o&&1!==a.length?/[89]/.test(a)||N?P(t,"Invalid number"):s=parseInt(a,8):s=parseInt(a,10),We(S,s)}function tt(e){const t=Ze(16,e);return null===t&&P(u,"Bad character escape sequence"),t}let rt;function nt(){rt=!1;let e,t=!0;const r=p;for(;;){const o=n.charCodeAt(p);if(Ve(o))rt&&(e+=n.charAt(p)),++p;else{if(92!==o)break;{rt||(e=n.slice(r,p)),rt=!0,117!=n.charCodeAt(++p)&&P(p,"Expecting Unicode escape sequence \\uXXXX"),++p;const o=tt(4),i=String.fromCharCode(o);i||P(p-1,"Invalid Unicode escape"),(t?Ye(o):Ve(o))||P(p-4,"Invalid Unicode escape"),e+=i}}t=!1}return rt?e:n.slice(r,p)}function ot(){const e=nt();let r=x;return rt||(Fe(e)?r=ne[e]:(t.forbidReserved&&(3===t.ecmaVersion?Ae:ke)(e)||N&&je(e))&&P(u,"The keyword '"+e+"' is reserved")),We(r,e)}function it(){b=u,_=l,R=f,Ke()}function at(e){if(N=e,p=_,t.locations)for(;p<g;)g=n.lastIndexOf("\n",g-2)+1,--v;ze(),Ke()}function st(){this.type=null,this.start=u,this.end=null}function ct(){this.start=h,this.end=null,null!==i&&(this.source=i)}function pt(){const e=new st;return t.locations&&(e.loc=new ct),t.directSourceFile&&(e.sourceFile=t.directSourceFile),t.ranges&&(e.range=[u,0]),e}function ut(e){const r=new st;return r.start=e.start,t.locations&&(r.loc=new ct,r.loc.start=e.loc.start),t.ranges&&(r.range=[e.range[0],0]),r}function lt(e,r){return e.type=r,e.end=_,t.locations&&(e.loc.end=R),t.ranges&&(e.range[1]=_),e}function ht(e){return t.ecmaVersion>=5&&"ExpressionStatement"===e.type&&"Literal"===e.expression.type&&"use strict"===e.expression.value}function ft(e){if(d===e)return it(),!0}function dt(){return!t.strictSemicolons&&(d===A||d===se||Me.test(n.slice(_,u)))}function yt(){ft(le)||dt()||vt()}function Et(e){d===e?it():vt()}function vt(){P(u,"Unexpected token")}function gt(e){"Identifier"!==e.type&&"MemberExpression"!==e.type&&P(e.start,"Assigning to rvalue"),N&&"Identifier"===e.type&&Ie(e.name)&&P(e.start,"Assigning to "+e.name+" in strict mode")}const bt={kind:"loop"},_t={kind:"switch"};function Rt(){(d===ye||d===ve&&"/="==y)&&Ke(!0);const e=d,t=pt();switch(e){case k:case F:it();const s=e===k;ft(le)||dt()?t.label=null:d!==x?vt():(t.label=Ut(),yt());for(var r=0;r<m.length;++r){const e=m[r];if(null==t.label||e.name===t.label.name){if(null!=e.kind&&(s||"loop"===e.kind))break;if(t.label&&s)break}}return r===m.length&&P(t.start,"Unsyntactic "+e.keyword),lt(t,s?"BreakStatement":"ContinueStatement");case U:return it(),yt(),lt(t,"DebuggerStatement");case D:return it(),m.push(bt),t.body=Rt(),m.pop(),Et(z),t.test=Ot(),yt(),lt(t,"DoWhileStatement");case G:if(it(),m.push(bt),Et(ce),d===le)return Nt(t,null);if(d===H){var o=pt();return it(),Tt(o,!0),lt(o,"VariableDeclaration"),1===o.declarations.length&&ft(re)?Pt(t,o):Nt(t,o)}return o=St(!1,!0),ft(re)?(gt(o),Pt(t,o)):Nt(t,o);case Y:return it(),It(t,!0);case V:return it(),t.test=Ot(),t.consequent=Rt(),t.alternate=ft(B)?Rt():null,lt(t,"IfStatement");case X:return O||P(u,"'return' outside of function"),it(),ft(le)||dt()?t.argument=null:(t.argument=St(),yt()),lt(t,"ReturnStatement");case J:it(),t.discriminant=Ot(),t.cases=[],Et(ae),m.push(_t);for(var i,a;d!=se;)if(d===j||d===L){const e=d===j;i&&lt(i,"SwitchCase"),t.cases.push(i=pt()),i.consequent=[],it(),e?i.test=St():(a&&P(b,"Multiple default clauses"),a=!0,i.test=null),Et(he)}else i||vt(),i.consequent.push(Rt());return i&&lt(i,"SwitchCase"),it(),m.pop(),lt(t,"SwitchStatement");case W:return it(),Me.test(n.slice(_,u))&&P(_,"Illegal newline after throw"),t.argument=St(),yt(),lt(t,"ThrowStatement");case q:if(it(),t.block=mt(),t.handler=null,d===I){const e=pt();it(),Et(ce),e.param=Ut(),N&&Ie(e.param.name)&&P(e.param.start,"Binding "+e.param.name+" in strict mode"),Et(pe),e.guard=null,e.body=mt(),t.handler=lt(e,"CatchClause")}return t.guardedHandlers=T,t.finalizer=ft(M)?mt():null,t.handler||t.finalizer||P(t.start,"Missing catch or finally clause"),lt(t,"TryStatement");case H:return it(),Tt(t),yt(),lt(t,"VariableDeclaration");case z:return it(),t.test=Ot(),m.push(bt),t.body=Rt(),m.pop(),lt(t,"WhileStatement");case K:return N&&P(u,"'with' in strict mode"),it(),t.object=Ot(),t.body=Rt(),lt(t,"WithStatement");case ae:return mt();case le:return it(),lt(t,"EmptyStatement");default:const c=y,p=St();if(e===x&&"Identifier"===p.type&&ft(he)){for(r=0;r<m.length;++r)m[r].name===c&&P(p.start,"Label '"+c+"' is already declared");const e=d.isLoop?"loop":d===J?"switch":null;return m.push({name:c,kind:e}),t.body=Rt(),m.pop(),t.label=p,lt(t,"LabeledStatement")}return t.expression=p,yt(),lt(t,"ExpressionStatement")}}function Ot(){Et(ce);const e=St();return Et(pe),e}function mt(e){const t=pt();let r,n=!0,o=!1;for(t.body=[],Et(ae);!ft(se);){const i=Rt();t.body.push(i),n&&e&&ht(i)&&(r=o,at(o=!0)),n=!1}return o&&!r&&at(!1),lt(t,"BlockStatement")}function Nt(e,t){return e.init=t,Et(le),e.test=d===le?null:St(),Et(le),e.update=d===pe?null:St(),Et(pe),e.body=Rt(),m.pop(),lt(e,"ForStatement")}function Pt(e,t){return e.left=t,e.right=St(),Et(pe),e.body=Rt(),m.pop(),lt(e,"ForInStatement")}function Tt(e,t){for(e.declarations=[],e.kind="var";;){const r=pt();if(r.id=Ut(),N&&Ie(r.id.name)&&P(r.id.start,"Binding "+r.id.name+" in strict mode"),r.init=ft(Ee)?St(!0,t):null,e.declarations.push(lt(r,"VariableDeclarator")),!ft(ue))break}return e}function St(e,t){const r=wt(t);if(!e&&d===ue){const e=ut(r);for(e.expressions=[r];ft(ue);)e.expressions.push(wt(t));return lt(e,"SequenceExpression")}return r}function wt(e){const t=function(e){const t=function(e){return Ct(xt(),-1,e)}(e);if(ft(de)){const r=ut(t);return r.test=t,r.consequent=St(!0),Et(he),r.alternate=St(!0,e),lt(r,"ConditionalExpression")}return t}(e);if(d.isAssign){const r=ut(t);return r.operator=y,r.left=t,it(),r.right=wt(e),gt(t),lt(r,"AssignmentExpression")}return t}function Ct(e,t,r){const n=d.binop;if(null!=n&&(!r||d!==re)&&n>t){const o=ut(e);o.left=e,o.operator=y;const i=d;return it(),o.right=Ct(xt(),n,r),Ct(lt(o,i===_e||i===Re?"LogicalExpression":"BinaryExpression"),t,r)}return e}function xt(){if(d.prefix){var e=pt(),t=d.isUpdate;return e.operator=y,e.prefix=!0,E=!0,it(),e.argument=xt(),t?gt(e.argument):N&&"delete"===e.operator&&"Identifier"===e.argument.type&&P(e.start,"Deleting local variable in strict mode"),lt(e,t?"UpdateExpression":"UnaryExpression")}let r=At(kt());for(;d.postfix&&!dt();)(e=ut(r)).operator=y,e.prefix=!1,e.argument=r,gt(r),it(),r=lt(e,"UpdateExpression");return r}function At(e,t){var r;return ft(fe)?((r=ut(e)).object=e,r.property=Ut(!0),r.computed=!1,At(lt(r,"MemberExpression"),t)):ft(oe)?((r=ut(e)).object=e,r.property=St(),r.computed=!0,Et(ie),At(lt(r,"MemberExpression"),t)):!t&&ft(ce)?((r=ut(e)).callee=e,r.arguments=Ft(pe,!1),At(lt(r,"CallExpression"),t)):e}function kt(){switch(d){case Q:var e=pt();return it(),lt(e,"ThisExpression");case x:return Ut();case S:case C:case w:return(e=pt()).value=y,e.raw=n.slice(u,l),it(),lt(e,"Literal");case Z:case ee:case te:return(e=pt()).value=d.atomValue,e.raw=d.keyword,it(),lt(e,"Literal");case ce:const r=h,o=u;it();const i=St();return i.start=o,i.end=l,t.locations&&(i.loc.start=r,i.loc.end=f),t.ranges&&(i.range=[o,l]),Et(pe),i;case oe:return e=pt(),it(),e.elements=Ft(ie,!0,!0),lt(e,"ArrayExpression");case ae:return function(){const e=pt();let r=!0,n=!1;for(e.properties=[],it();!ft(se);){if(r)r=!1;else if(Et(ue),t.allowTrailingCommas&&ft(se))break;const o={key:jt()};let i,a=!1;if(ft(he)?(o.value=St(!0),i=o.kind="init"):t.ecmaVersion>=5&&"Identifier"===o.key.type&&("get"===o.key.name||"set"===o.key.name)?(a=n=!0,i=o.kind=o.key.name,o.key=jt(),d!==ce&&vt(),o.value=It(pt(),!1)):vt(),"Identifier"===o.key.type&&(N||n))for(let t=0;t<e.properties.length;++t){const r=e.properties[t];if(r.key.name===o.key.name){let e=i==r.kind||a&&"init"===r.kind||"init"===i&&("get"===r.kind||"set"===r.kind);e&&!N&&"init"===i&&"init"===r.kind&&(e=!1),e&&P(o.key.start,"Redefinition of property")}}e.properties.push(o)}return lt(e,"ObjectExpression")}();case Y:return e=pt(),it(),It(e,!1);case $:return function(){const e=pt();return it(),e.callee=At(kt(),!0),ft(ce)?e.arguments=Ft(pe,!1):e.arguments=T,lt(e,"NewExpression")}();default:vt()}}function jt(){return d===S||d===C?kt():Ut(!0)}function It(e,t){d===x?e.id=Ut():t?vt():e.id=null,e.params=[];let r=!0;for(Et(ce);!ft(pe);)r?r=!1:Et(ue),e.params.push(Ut());const n=O,o=m;if(O=!0,m=[],e.body=mt(!0),O=n,m=o,N||e.body.body.length&&ht(e.body.body[0]))for(let t=e.id?-1:0;t<e.params.length;++t){const r=t<0?e.id:e.params[t];if((je(r.name)||Ie(r.name))&&P(r.start,"Defining '"+r.name+"' in strict mode"),t>=0)for(let n=0;n<t;++n)r.name===e.params[n].name&&P(r.start,"Argument name clash in strict mode")}return lt(e,t?"FunctionDeclaration":"FunctionExpression")}function Ft(e,r,n){const o=[];let i=!0;for(;!ft(e);){if(i)i=!1;else if(Et(ue),r&&t.allowTrailingCommas&&ft(e))break;n&&d===ue?o.push(null):o.push(St(!0))}return o}function Ut(e){const r=pt();return r.name=d===x?y:e&&!t.forbidReserved&&d.keyword||vt(),E=!1,it(),lt(r,"Identifier")}var Lt=function(t,r){this.uid=Math.random().toString(16).substr(2),this.halted_=!1,this.hasCompleteFuncRun_=!1,this.completeFunc_=function(){},this.hasErrorFuncRun_=!1,this.errorFunc_=function(){},this.unpauseFunc_=function(){},"string"==typeof t&&(t=e.parse(t,Lt.PARSE_OPTIONS)),this.nodeConstructor=t.constructor;var n=new this.nodeConstructor({options:{}});for(var o in t)n[o]="body"===o?t[o].slice():t[o];this.ast=n,this.initFunc_=r,this.paused_=!1,this.polyfills_=[],this.functionCounter_=0,this.stepFunctions_=Object.create(null);var i,a,s=/^step([A-Z]\w*)$/;for(var c in this)"function"==typeof this[c]&&(i=c.match(s))&&(this.stepFunctions_[i[1]]=this[c].bind(this));this.globalScope=this.createScope(this.ast,null),this.globalObject=this.globalScope.object,this.ast=e.parse(this.polyfills_.join("\n"),Lt.PARSE_OPTIONS),this.polyfills_=void 0,Lt.stripLocations_(this.ast,void 0,void 0),(a=new Lt.State(this.ast,this.globalScope)).done=!1,this.stateStack=[a],this.run(),this.value=void 0,this.ast=n,(a=new Lt.State(this.ast,this.globalScope)).done=!1,this.stateStack.length=0,this.stateStack[0]=a,this.stateStack=this.stateStack};Lt.Completion={NORMAL:0,BREAK:1,CONTINUE:2,RETURN:3,THROW:4},Lt.PARSE_OPTIONS={ecmaVersion:5},Lt.READONLY_DESCRIPTOR={configurable:!0,enumerable:!0,writable:!1},Lt.NONENUMERABLE_DESCRIPTOR={configurable:!0,enumerable:!1,writable:!0},Lt.READONLY_NONENUMERABLE_DESCRIPTOR={configurable:!0,enumerable:!1,writable:!1},Lt.NONCONFIGURABLE_READONLY_NONENUMERABLE_DESCRIPTOR={configurable:!1,enumerable:!1,writable:!1},Lt.VARIABLE_DESCRIPTOR={configurable:!1,enumerable:!0,writable:!0},Lt.STEP_ERROR={STEP_ERROR:!0},Lt.SCOPE_REFERENCE={SCOPE_REFERENCE:!0},Lt.VALUE_IN_DESCRIPTOR={VALUE_IN_DESCRIPTOR:!0},Lt.REGEXP_TIMEOUT={REGEXP_TIMEOUT:!0},Lt.toStringCycles_=[],Lt.vm=null,Lt.nativeGlobal=void 0,Lt.WORKER_CODE=["onmessage = function(e) {","var result;","var data = e.data;","switch (data[0]) {","case 'split':","result = data[1].split(data[2], data[3]);","break;","case 'match':","result = data[1].match(data[2]);","break;","case 'search':","result = data[1].search(data[2]);","break;","case 'replace':","result = data[1].replace(data[2], data[3]);","break;","case 'exec':","var regexp = data[1];","regexp.lastIndex = data[2];","result = [regexp.exec(data[3]), data[1].lastIndex];","break;","default:","throw Error('Unknown RegExp operation: ' + data[0]);","}","postMessage(result);","};"],Lt.legalArrayLength=function(e){var t=e>>>0;return t===Number(e)?t:NaN},Lt.legalArrayIndex=function(e){var t=e>>>0;return String(t)===String(e)&&4294967295!==t?t:NaN},Lt.stripLocations_=function(e,t,r){for(var n in t?e.start=t:delete e.start,r?e.end=r:delete e.end,e)if(e.hasOwnProperty(n)){var o=e[n];o&&"object"==typeof o&&Lt.stripLocations_(o,t,r)}},Lt.prototype.REGEXP_MODE=2,Lt.prototype.REGEXP_THREAD_TIMEOUT=1e3,Lt.prototype.POLYFILL_TIMEOUT=1e3,Lt.prototype.getterStep_=!1,Lt.prototype.setterStep_=!1,Lt.prototype.appendCode=function(t){var r=this.stateStack[0];if(!r||"Program"!==r.node.type)throw Error("Expecting original AST to start with a Program node.");if("string"==typeof t&&(t=e.parse(t,Lt.PARSE_OPTIONS)),!t||"Program"!==t.type)throw Error("Expecting new AST to start with a Program node.");this.populateScope_(t,r.scope),Array.prototype.push.apply(r.node.body,t.body),r.done=!1},Lt.prototype.step=function(){var e=this.stateStack;Date.now();do{var t=e[e.length-1];if(!t)return!1;var r=t.node,n=r.type;if("Program"===n&&t.done)return this.completeFunc_(),!1;if(this.paused_)return!0;try{var o=this.stepFunctions_[n](e,t,r)}catch(e){if(e!==Lt.STEP_ERROR)throw e}if(o&&e.push(o),this.getterStep_)throw Error("Getter not supported in this context");if(this.setterStep_)throw Error("Setter not supported in this context")}while(!r.end);return!0},Lt.prototype.halt=function(){this.halted_=!0},Lt.prototype.run=function(){for(;!this.paused_&&this.step(););return this.paused_},Lt.prototype.runAll=function(e,t){var r=this;r.errorFunc_=t=>{r.hasErrorFuncRun_||(r.hasErrorFuncRun_=!0,e(t))},r.completeFunc_=()=>{r.hasCompleteFuncRun_||(r.hasCompleteFuncRun_=!0,t())},r.unpauseFunc_=function(){try{r.run()}catch(e){r.errorFunc_(e)}};try{r.run()}catch(e){r.errorFunc_(e)}},Lt.prototype.callFunction=function(e,t,r){var n=this.buildFunctionCaller_.apply(this,arguments);return new Lt.Callback(n)},Lt.prototype.queueFunction=function(e,t,r){var n=this.stateStack[0],o=this.buildFunctionCaller_.apply(this,arguments);return n.node.body.push(o),n.done=!1,new Lt.Callback(o,!0)},Lt.prototype.buildFunctionCaller_=function(e,t,r){var n=this,o=Array.prototype.slice.call(arguments,2).map((function(e){return e instanceof Lt.Object?e:n.nativeToPseudo(e)})),i=this.stateStack[this.stateStack.length-1].scope,a=new this.nodeConstructor({options:{}});return a.type="CallExpressionFunc_",a.funcThis_=t,a.func_=e,a.arguments_=o,a.scope_=i,a},Lt.prototype.initGlobal=function(e){this.setProperty(e,"NaN",NaN,Lt.READONLY_DESCRIPTOR),this.setProperty(e,"Infinity",1/0,Lt.READONLY_DESCRIPTOR),this.setProperty(e,"undefined",void 0,Lt.READONLY_DESCRIPTOR),this.setProperty(e,"window",e,Lt.READONLY_DESCRIPTOR),this.setProperty(e,"this",e,Lt.READONLY_DESCRIPTOR),this.setProperty(e,"self",e),this.OBJECT_PROTO=new Lt.Object(null),this.FUNCTION_PROTO=new Lt.Object(this.OBJECT_PROTO),this.initFunction(e),this.initObject(e),e.proto=this.OBJECT_PROTO,this.setProperty(e,"constructor",this.OBJECT,Lt.NONENUMERABLE_DESCRIPTOR),this.initArray(e),this.initString(e),this.initBoolean(e),this.initNumber(e),this.initDate(e),this.initRegExp(e),this.initError(e),this.initMath(e),this.initJSON(e);var t=this,r=this.createNativeFunction((function(e){throw EvalError("Can't happen")}),!1);r.eval=!0,this.setProperty(e,"eval",r),this.setProperty(e,"parseInt",this.createNativeFunction(parseInt,!1)),this.setProperty(e,"parseFloat",this.createNativeFunction(parseFloat,!1)),this.setProperty(e,"isNaN",this.createNativeFunction(isNaN,!1)),this.setProperty(e,"isFinite",this.createNativeFunction(isFinite,!1));for(var n=[[escape,"escape"],[unescape,"unescape"],[decodeURI,"decodeURI"],[decodeURIComponent,"decodeURIComponent"],[encodeURI,"encodeURI"],[encodeURIComponent,"encodeURIComponent"]],o=0;o<n.length;o++){var i=function(e){return function(r){try{return e(r)}catch(e){t.throwException(t.URI_ERROR,e.message)}}}(n[o][0]);this.setProperty(e,n[o][1],this.createNativeFunction(i,!1),Lt.NONENUMERABLE_DESCRIPTOR)}this.OBJECT=this.OBJECT,this.OBJECT_PROTO=this.OBJECT_PROTO,this.FUNCTION=this.FUNCTION,this.FUNCTION_PROTO=this.FUNCTION_PROTO,this.ARRAY=this.ARRAY,this.ARRAY_PROTO=this.ARRAY_PROTO,this.REGEXP=this.REGEXP,this.REGEXP_PROTO=this.REGEXP_PROTO,this.DATE=this.DATE,this.DATE_PROTO=this.DATE_PROTO,this.initFunc_&&this.initFunc_(this,e)},Lt.prototype.initFunction=function(t){var r,n=this,o=/^[A-Za-z_$][\w$]*$/;r=function(t){if(arguments.length)var r=String(arguments[arguments.length-1]);else r="";var i=Array.prototype.slice.call(arguments,0,-1).join(",").trim();if(i){for(var a=i.split(/\s*,\s*/),s=0;s<a.length;s++){var c=a[s];o.test(c)||n.throwException(n.SYNTAX_ERROR,"Invalid function argument: "+c)}i=a.join(", ")}try{var p=e.parse("(function("+i+") {"+r+"})",Lt.PARSE_OPTIONS)}catch(e){n.throwException(n.SYNTAX_ERROR,"Invalid code: "+e.message)}1!==p.body.length&&n.throwException(n.SYNTAX_ERROR,"Invalid code in function body.");var u=p.body[0].expression;return n.createFunction(u,n.globalScope,"anonymous")},this.FUNCTION=this.createNativeFunction(r,!0),this.setProperty(t,"Function",this.FUNCTION,Lt.NONENUMERABLE_DESCRIPTOR),this.setProperty(this.FUNCTION,"prototype",this.FUNCTION_PROTO,Lt.NONENUMERABLE_DESCRIPTOR),this.setProperty(this.FUNCTION_PROTO,"constructor",this.FUNCTION,Lt.NONENUMERABLE_DESCRIPTOR),this.FUNCTION_PROTO.nativeFunc=function(){},this.FUNCTION_PROTO.nativeFunc.id=this.functionCounter_++,this.FUNCTION_PROTO.illegalConstructor=!0,this.setProperty(this.FUNCTION_PROTO,"length",0,Lt.READONLY_NONENUMERABLE_DESCRIPTOR),this.FUNCTION_PROTO.class="Function",r=function(e,t){var r=n.stateStack[n.stateStack.length-1];r.func_=this,r.funcThis_=e,r.arguments_=[],null!=t&&(t instanceof Lt.Object?r.arguments_=n.arrayPseudoToNative(t):n.throwException(n.TYPE_ERROR,"CreateListFromArrayLike called on non-object")),r.doneExec_=!1},this.setNativeFunctionPrototype(this.FUNCTION,"apply",r),r=function(e){var t=n.stateStack[n.stateStack.length-1];t.func_=this,t.funcThis_=e,t.arguments_=[];for(var r=1;r<arguments.length;r++)t.arguments_.push(arguments[r]);t.doneExec_=!1},this.setNativeFunctionPrototype(this.FUNCTION,"call",r),this.polyfills_.push("Object.defineProperty(Function.prototype, 'bind',","{configurable: true, writable: true, value:","function bind(oThis) {","if (typeof this !== 'function') {","throw TypeError('What is trying to be bound is not callable');","}","var aArgs   = Array.prototype.slice.call(arguments, 1),","fToBind = this,","fNOP    = function() {},","fBound  = function() {","return fToBind.apply(this instanceof fNOP","? this",": oThis,","aArgs.concat(Array.prototype.slice.call(arguments)));","};","if (this.prototype) {","fNOP.prototype = this.prototype;","}","fBound.prototype = new fNOP();","return fBound;","}","});",""),r=function(){return String(this)},this.setNativeFunctionPrototype(this.FUNCTION,"toString",r),this.setProperty(this.FUNCTION,"toString",this.createNativeFunction(r,!1),Lt.NONENUMERABLE_DESCRIPTOR),r=function(){return this.valueOf()},this.setNativeFunctionPrototype(this.FUNCTION,"valueOf",r),this.setProperty(this.FUNCTION,"valueOf",this.createNativeFunction(r,!1),Lt.NONENUMERABLE_DESCRIPTOR)},Lt.prototype.initObject=function(e){var t,r=this;t=function(e){if(null==e)return r.calledWithNew()?this:r.createObjectProto(r.OBJECT_PROTO);if(!(e instanceof Lt.Object)){var t=r.createObjectProto(r.getPrototype(e));return t.data=e,t}return e},this.OBJECT=this.createNativeFunction(t,!0),this.setProperty(this.OBJECT,"prototype",this.OBJECT_PROTO,Lt.NONENUMERABLE_DESCRIPTOR),this.setProperty(this.OBJECT_PROTO,"constructor",this.OBJECT,Lt.NONENUMERABLE_DESCRIPTOR),this.setProperty(e,"Object",this.OBJECT,Lt.NONENUMERABLE_DESCRIPTOR);var n=function(e){null==e&&r.throwException(r.TYPE_ERROR,"Cannot convert '"+e+"' to object")};t=function(e){n(e);var t=e instanceof Lt.Object?e.properties:e;return r.arrayNativeToPseudo(Object.getOwnPropertyNames(t))},this.setProperty(this.OBJECT,"getOwnPropertyNames",this.createNativeFunction(t,!1),Lt.NONENUMERABLE_DESCRIPTOR),t=function(e){return n(e),e instanceof Lt.Object&&(e=e.properties),r.arrayNativeToPseudo(Object.keys(e))},this.setProperty(this.OBJECT,"keys",this.createNativeFunction(t,!1),Lt.NONENUMERABLE_DESCRIPTOR),t=function(e){return null===e?r.createObjectProto(null):(e instanceof Lt.Object||r.throwException(r.TYPE_ERROR,"Object prototype may only be an Object or null"),r.createObjectProto(e))},this.setProperty(this.OBJECT,"create",this.createNativeFunction(t,!1),Lt.NONENUMERABLE_DESCRIPTOR),this.polyfills_.push("(function() {","var create_ = Object.create;","Object.create = function create(proto, props) {","var obj = create_(proto);","props && Object.defineProperties(obj, props);","return obj;","};","})();",""),t=function(e,t,n){return t=String(t),e instanceof Lt.Object||r.throwException(r.TYPE_ERROR,"Object.defineProperty called on non-object"),n instanceof Lt.Object||r.throwException(r.TYPE_ERROR,"Property description must be an object"),!e.properties[t]&&e.preventExtensions&&r.throwException(r.TYPE_ERROR,"Can't define property '"+t+"', object is not extensible"),r.setProperty(e,t,Lt.VALUE_IN_DESCRIPTOR,n.properties),e},this.setProperty(this.OBJECT,"defineProperty",this.createNativeFunction(t,!1),Lt.NONENUMERABLE_DESCRIPTOR),this.polyfills_.push("(function() {","var defineProperty_ = Object.defineProperty;","Object.defineProperty = function defineProperty(obj, prop, d1) {","var d2 = {};","if ('configurable' in d1) d2.configurable = d1.configurable;","if ('enumerable' in d1) d2.enumerable = d1.enumerable;","if ('writable' in d1) d2.writable = d1.writable;","if ('value' in d1) d2.value = d1.value;","if ('get' in d1) d2.get = d1.get;","if ('set' in d1) d2.set = d1.set;","return defineProperty_(obj, prop, d2);","};","})();","Object.defineProperty(Object, 'defineProperties',","{configurable: true, writable: true, value:","function defineProperties(obj, props) {","var keys = Object.keys(props);","for (var i = 0; i < keys.length; i++) {","Object.defineProperty(obj, keys[i], props[keys[i]]);","}","return obj;","}","});",""),t=function(e,t){if(e instanceof Lt.Object||r.throwException(r.TYPE_ERROR,"Object.getOwnPropertyDescriptor called on non-object"),(t=String(t))in e.properties){var n=Object.getOwnPropertyDescriptor(e.properties,t),o=e.getter[t],i=e.setter[t],a=r.createObjectProto(r.OBJECT_PROTO);return o||i?(r.setProperty(a,"get",o),r.setProperty(a,"set",i)):(r.setProperty(a,"value",n.value),r.setProperty(a,"writable",n.writable)),r.setProperty(a,"configurable",n.configurable),r.setProperty(a,"enumerable",n.enumerable),a}},this.setProperty(this.OBJECT,"getOwnPropertyDescriptor",this.createNativeFunction(t,!1),Lt.NONENUMERABLE_DESCRIPTOR),t=function(e){return n(e),r.getPrototype(e)},this.setProperty(this.OBJECT,"getPrototypeOf",this.createNativeFunction(t,!1),Lt.NONENUMERABLE_DESCRIPTOR),t=function(e){return Boolean(e)&&!e.preventExtensions},this.setProperty(this.OBJECT,"isExtensible",this.createNativeFunction(t,!1),Lt.NONENUMERABLE_DESCRIPTOR),t=function(e){return e instanceof Lt.Object&&(e.preventExtensions=!0),e},this.setProperty(this.OBJECT,"preventExtensions",this.createNativeFunction(t,!1),Lt.NONENUMERABLE_DESCRIPTOR),this.setNativeFunctionPrototype(this.OBJECT,"toString",Lt.Object.prototype.toString),this.setNativeFunctionPrototype(this.OBJECT,"toLocaleString",Lt.Object.prototype.toString),this.setNativeFunctionPrototype(this.OBJECT,"valueOf",Lt.Object.prototype.valueOf),t=function(e){return n(this),this instanceof Lt.Object?String(e)in this.properties:this.hasOwnProperty(e)},this.setNativeFunctionPrototype(this.OBJECT,"hasOwnProperty",t),t=function(e){return n(this),this instanceof Lt.Object?Object.prototype.propertyIsEnumerable.call(this.properties,e):this.propertyIsEnumerable(e)},this.setNativeFunctionPrototype(this.OBJECT,"propertyIsEnumerable",t),t=function(e){for(;;){if(!(e=r.getPrototype(e)))return!1;if(e===this)return!0}},this.setNativeFunctionPrototype(this.OBJECT,"isPrototypeOf",t)},Lt.prototype.initArray=function(e){var t,r=this;t=function(e){if(r.calledWithNew())var t=this;else t=r.createArray();var n=arguments[0];if(1===arguments.length&&"number"==typeof n)isNaN(Lt.legalArrayLength(n))&&r.throwException(r.RANGE_ERROR,"Invalid array length"),t.properties.length=n;else{for(var o=0;o<arguments.length;o++)t.properties[o]=arguments[o];t.properties.length=o}return t},this.ARRAY=this.createNativeFunction(t,!0),this.ARRAY_PROTO=this.ARRAY.properties.prototype,this.setProperty(e,"Array",this.ARRAY,Lt.NONENUMERABLE_DESCRIPTOR),t=function(e){return e&&"Array"===e.class},this.setProperty(this.ARRAY,"isArray",this.createNativeFunction(t,!1),Lt.NONENUMERABLE_DESCRIPTOR),this.setProperty(this.ARRAY_PROTO,"length",0,{configurable:!1,enumerable:!1,writable:!0}),this.ARRAY_PROTO.class="Array",this.polyfills_.push("Object.defineProperty(Array.prototype, 'pop',","{configurable: true, writable: true, value:","function pop() {","if (!this) throw TypeError();","var o = Object(this);","var len = o.length >>> 0;","if (!len || len < 0) {","o.length = 0;","return undefined;","}","len--;","var x = o[len];","delete o[len];","o.length = len;","return x;","}","});","Object.defineProperty(Array.prototype, 'push',","{configurable: true, writable: true, value:","function push(var_args) {","if (!this) throw TypeError();","var o = Object(this);","var len = o.length >>> 0;","for (var i = 0; i < arguments.length; i++) {","o[len] = arguments[i];","len++;","}","o.length = len;","return len;","}","});","Object.defineProperty(Array.prototype, 'shift',","{configurable: true, writable: true, value:","function shift() {","if (!this) throw TypeError();","var o = Object(this);","var len = o.length >>> 0;","if (!len || len < 0) {","o.length = 0;","return undefined;","}","var value = o[0];","for (var i = 0; i < len - 1; i++) {","o[i] = o[i + 1];","}","delete o[i];","o.length = len - 1;","return value;","}","});","Object.defineProperty(Array.prototype, 'unshift',","{configurable: true, writable: true, value:","function unshift(var_args) {","if (!this) throw TypeError();","var o = Object(this);","var len = o.length >>> 0;","if (!len || len < 0) {","len = 0;","}","for (var i = len - 1; i >= 0; i--) {","o[i + arguments.length] = o[i];","}","for (var i = 0; i < arguments.length; i++) {","o[i] = arguments[i];","}","return o.length = len + arguments.length;","}","});","Object.defineProperty(Array.prototype, 'reverse',","{configurable: true, writable: true, value:","function reverse() {","if (!this) throw TypeError();","var o = Object(this);","var len = o.length >>> 0;","if (!len || len < 2) {","return o;","}","for (var i = 0; i < len / 2 - 0.5; i++) {","var x = o[i];","o[i] = o[len - i - 1];","o[len - i - 1] = x;","}","return o;","}","});","Object.defineProperty(Array.prototype, 'indexOf',","{configurable: true, writable: true, value:","function indexOf(searchElement, fromIndex) {","if (!this) throw TypeError();","var o = Object(this);","var len = o.length >>> 0;","var n = fromIndex | 0;","if (!len || n >= len) {","return -1;","}","var i = Math.max(n >= 0 ? n : len - Math.abs(n), 0);","while (i < len) {","if (i in o && o[i] === searchElement) {","return i;","}","i++;","}","return -1;","}","});","Object.defineProperty(Array.prototype, 'lastIndexOf',","{configurable: true, writable: true, value:","function lastIndexOf(searchElement, fromIndex) {","if (!this) throw TypeError();","var o = Object(this);","var len = o.length >>> 0;","if (!len) {","return -1;","}","var n = len - 1;","if (arguments.length > 1) {","n = fromIndex | 0;","if (n) {","n = (n > 0 || -1) * Math.floor(Math.abs(n));","}","}","var i = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n);","while (i >= 0) {","if (i in o && o[i] === searchElement) {","return i;","}","i--;","}","return -1;","}","});","Object.defineProperty(Array.prototype, 'slice',","{configurable: true, writable: true, value:","function slice(start, end) {","if (!this) throw TypeError();","var o = Object(this);","var len = o.length >>> 0;","start |= 0;","start = (start >= 0) ? start : Math.max(0, len + start);","if (typeof end !== 'undefined') {","if (end !== Infinity) {","end |= 0;","}","if (end < 0) {","end = len + end;","} else {","end = Math.min(end, len);","}","} else {","end = len;","}","var size = end - start;","var cloned = [];","for (var i = 0; i < size; i++) {","cloned[i] = o[start + i];","}","return cloned;","}","});","Object.defineProperty(Array.prototype, 'splice',","{configurable: true, writable: true, value:","function splice(start, deleteCount, var_args) {","if (!this) throw TypeError();","var o = Object(this);","var len = o.length >>> 0;","start |= 0;","if (start < 0) {","start = Math.max(len + start, 0);","} else {","start = Math.min(start, len);","}","if (arguments.length < 1) {","deleteCount = len - start;","} else {","deleteCount |= 0;","deleteCount = Math.max(0, Math.min(deleteCount, len - start));","}","var removed = [];","for (var i = start; i < start + deleteCount; i++) {","removed[removed.length++] = o[i];","o[i] = o[i + deleteCount];","}","for (var i = start + deleteCount; i < len - deleteCount; i++) {","o[i] = o[i + deleteCount];","}","for (var i = len - deleteCount; i < len; i++) {","delete o[i];","}","len -= deleteCount;","for (var i = len - 1; i >= start; i--) {","o[i + arguments.length - 2] = o[i];","}","len += arguments.length - 2;","for (var i = 2; i < arguments.length; i++) {","o[start + i - 2] = arguments[i];","}","o.length = len;","return removed;","}","});","Object.defineProperty(Array.prototype, 'concat',","{configurable: true, writable: true, value:","function concat(var_args) {","if (!this) throw TypeError();","var o = Object(this);","var cloned = [];","for (var i = -1; i < arguments.length; i++) {","var value = (i === -1) ? o : arguments[i];","if (Array.isArray(value)) {","cloned.push.apply(cloned, value);","} else {","cloned.push(value);","}","}","return cloned;","}","});","Object.defineProperty(Array.prototype, 'join',","{configurable: true, writable: true, value:","function join(opt_separator) {","if (!this) throw TypeError();","var o = Object(this);","var sep = typeof opt_separator === 'undefined' ?","',' : ('' + opt_separator);","var str = '';","for (var i = 0; i < o.length; i++) {","if (i && sep) {","str += sep;","}","str += o[i];","}","return str;","}","});","Object.defineProperty(Array.prototype, 'every',","{configurable: true, writable: true, value:","function(callbackfn, thisArg) {","if (!this || typeof callbackfn !== 'function') throw TypeError();","var T, k;","var O = Object(this);","var len = O.length >>> 0;","if (arguments.length > 1) T = thisArg;","k = 0;","while (k < len) {","if (k in O && !callbackfn.call(T, O[k], k, O)) return false;","k++;","}","return true;","}","});","Object.defineProperty(Array.prototype, 'filter',","{configurable: true, writable: true, value:","function(fun/*, thisArg*/) {","if (this === void 0 || this === null || typeof fun !== 'function') throw TypeError();","var t = Object(this);","var len = t.length >>> 0;","var res = [];","var thisArg = arguments.length >= 2 ? arguments[1] : void 0;","for (var i = 0; i < len; i++) {","if (i in t) {","var val = t[i];","if (fun.call(thisArg, val, i, t)) res.push(val);","}","}","return res;","}","});","Object.defineProperty(Array.prototype, 'forEach',","{configurable: true, writable: true, value:","function(callback, thisArg) {","if (!this || typeof callback !== 'function') throw TypeError();","var T, k;","var O = Object(this);","var len = O.length >>> 0;","if (arguments.length > 1) T = thisArg;","k = 0;","while (k < len) {","if (k in O) callback.call(T, O[k], k, O);","k++;","}","}","});","Object.defineProperty(Array.prototype, 'map',","{configurable: true, writable: true, value:","function(callback, thisArg) {","if (!this || typeof callback !== 'function') new TypeError;","var T, A, k;","var O = Object(this);","var len = O.length >>> 0;","if (arguments.length > 1) T = thisArg;","A = new Array(len);","k = 0;","while (k < len) {","if (k in O) A[k] = callback.call(T, O[k], k, O);","k++;","}","return A;","}","});","Object.defineProperty(Array.prototype, 'reduce',","{configurable: true, writable: true, value:","function(callback /*, initialValue*/) {","if (!this || typeof callback !== 'function') throw TypeError();","var t = Object(this), len = t.length >>> 0, k = 0, value;","if (arguments.length === 2) {","value = arguments[1];","} else {","while (k < len && !(k in t)) k++;","if (k >= len) {","throw TypeError('Reduce of empty array with no initial value');","}","value = t[k++];","}","for (; k < len; k++) {","if (k in t) value = callback(value, t[k], k, t);","}","return value;","}","});","Object.defineProperty(Array.prototype, 'reduceRight',","{configurable: true, writable: true, value:","function(callback /*, initialValue*/) {","if (null === this || 'undefined' === typeof this || 'function' !== typeof callback) throw TypeError();","var t = Object(this), len = t.length >>> 0, k = len - 1, value;","if (arguments.length >= 2) {","value = arguments[1];","} else {","while (k >= 0 && !(k in t)) k--;","if (k < 0) {","throw TypeError('Reduce of empty array with no initial value');","}","value = t[k--];","}","for (; k >= 0; k--) {","if (k in t) value = callback(value, t[k], k, t);","}","return value;","}","});","Object.defineProperty(Array.prototype, 'some',","{configurable: true, writable: true, value:","function(fun/*, thisArg*/) {","if (!this || typeof fun !== 'function') throw TypeError();","var t = Object(this);","var len = t.length >>> 0;","var thisArg = arguments.length >= 2 ? arguments[1] : void 0;","for (var i = 0; i < len; i++) {","if (i in t && fun.call(thisArg, t[i], i, t)) {","return true;","}","}","return false;","}","});","(function() {","var sort_ = Array.prototype.sort;","Array.prototype.sort = function(opt_comp) {","if (typeof opt_comp !== 'function') {","return sort_.call(this);","}","for (var i = 0; i < this.length; i++) {","var changes = 0;","for (var j = 0; j < this.length - i - 1; j++) {","if (opt_comp(this[j], this[j + 1]) > 0) {","var swap = this[j];","this[j] = this[j + 1];","this[j + 1] = swap;","changes++;","}","}","if (!changes) break;","}","return this;","};","})();","Object.defineProperty(Array.prototype, 'toLocaleString',","{configurable: true, writable: true, value:","function() {","var out = [];","for (var i = 0; i < this.length; i++) {","out[i] = (this[i] === null || this[i] === undefined) ? '' : this[i].toLocaleString();","}","return out.join(',');","}","});","")},Lt.prototype.initString=function(e){var t,r=this;t=function(e){return e=arguments.length?String(e):"",r.calledWithNew()?(this.data=e,this):e},this.STRING=this.createNativeFunction(t,!0),this.setProperty(e,"String",this.STRING),this.setProperty(this.STRING,"fromCharCode",this.createNativeFunction(String.fromCharCode,!1),Lt.NONENUMERABLE_DESCRIPTOR);for(var n=["charAt","charCodeAt","concat","indexOf","lastIndexOf","slice","substr","substring","toLocaleLowerCase","toLocaleUpperCase","toLowerCase","toUpperCase","trim"],o=0;o<n.length;o++)this.setNativeFunctionPrototype(this.STRING,n[o],String.prototype[n[o]]);t=function(e,t,n){return t=t?r.pseudoToNative(t):void 0,n=n?r.pseudoToNative(n):void 0,String(this).localeCompare(e,t,n)},this.setNativeFunctionPrototype(this.STRING,"localeCompare",t),t=function(e,t,n){var o=String(this);if(t=t?Number(t):void 0,r.isa(e,r.REGEXP)&&(e=e.data,r.maybeThrowRegExp(e,n),2===r.REGEXP_MODE))if(Lt.vm){var i={string:o,separator:e,limit:t};(c=r.vmCall("string.split(separator, limit)",i,e,n))!==Lt.REGEXP_TIMEOUT&&n(r.arrayNativeToPseudo(c))}else{var a=r.createWorker(),s=r.regExpTimeout(e,a,n);a.onmessage=function(e){clearTimeout(s),n(r.arrayNativeToPseudo(e.data))},a.postMessage(["split",o,e,t])}else{var c=o.split(e,t);n(r.arrayNativeToPseudo(c))}},this.setAsyncFunctionPrototype(this.STRING,"split",t),t=function(e,t){var n=String(this);if(e=r.isa(e,r.REGEXP)?e.data:new RegExp(e),r.maybeThrowRegExp(e,t),2!==r.REGEXP_MODE)o=n.match(e),t(o&&r.arrayNativeToPseudo(o));else if(Lt.vm){var o,i={string:n,regexp:e};(o=r.vmCall("string.match(regexp)",i,e,t))!==Lt.REGEXP_TIMEOUT&&t(o&&r.arrayNativeToPseudo(o))}else{var a=r.createWorker(),s=r.regExpTimeout(e,a,t);a.onmessage=function(e){clearTimeout(s),t(e.data&&r.arrayNativeToPseudo(e.data))},a.postMessage(["match",n,e])}},this.setAsyncFunctionPrototype(this.STRING,"match",t),t=function(e,t){var n=String(this);if(e=r.isa(e,r.REGEXP)?e.data:new RegExp(e),r.maybeThrowRegExp(e,t),2!==r.REGEXP_MODE)t(n.search(e));else if(Lt.vm){var o={string:n,regexp:e},i=r.vmCall("string.search(regexp)",o,e,t);i!==Lt.REGEXP_TIMEOUT&&t(i)}else{var a=r.createWorker(),s=r.regExpTimeout(e,a,t);a.onmessage=function(e){clearTimeout(s),t(e.data)},a.postMessage(["search",n,e])}},this.setAsyncFunctionPrototype(this.STRING,"search",t),t=function(e,t,n){var o=String(this);if(t=String(t),r.isa(e,r.REGEXP)&&(e=e.data,r.maybeThrowRegExp(e,n),2===r.REGEXP_MODE))if(Lt.vm){var i={string:o,substr:e,newSubstr:t},a=r.vmCall("string.replace(substr, newSubstr)",i,e,n);a!==Lt.REGEXP_TIMEOUT&&n(a)}else{var s=r.createWorker(),c=r.regExpTimeout(e,s,n);s.onmessage=function(e){clearTimeout(c),n(e.data)},s.postMessage(["replace",o,e,t])}else n(o.replace(e,t))},this.setAsyncFunctionPrototype(this.STRING,"replace",t),this.polyfills_.push("(function() {","var replace_ = String.prototype.replace;","String.prototype.replace = function(substr, newSubstr) {","if (typeof newSubstr !== 'function') {","return replace_.call(this, substr, newSubstr);","}","var str = this;","if (substr instanceof RegExp) {","var subs = [];","var m = substr.exec(str);","while (m) {","m.push(m.index, str);","var inject = newSubstr.apply(null, m);","subs.push([m.index, m[0].length, inject]);","m = substr.global ? substr.exec(str) : null;","}","for (var i = subs.length - 1; i >= 0; i--) {","str = str.substring(0, subs[i][0]) + subs[i][2] + str.substring(subs[i][0] + subs[i][1]);","}","} else {","var i = str.indexOf(substr);","if (i !== -1) {","var inject = newSubstr(str.substr(i, substr.length), i, str);","str = str.substring(0, i) + inject + str.substring(i + substr.length);","}","}","return str;","};","})();","")},Lt.prototype.initBoolean=function(e){var t,r=this;t=function(e){return e=Boolean(e),r.calledWithNew()?(this.data=e,this):e},this.BOOLEAN=this.createNativeFunction(t,!0),this.setProperty(e,"Boolean",this.BOOLEAN)},Lt.prototype.initNumber=function(e){var t,r=this;t=function(e){return e=arguments.length?Number(e):0,r.calledWithNew()?(this.data=e,this):e},this.NUMBER=this.createNativeFunction(t,!0),this.setProperty(e,"Number",this.NUMBER);for(var n=["MAX_VALUE","MIN_VALUE","NaN","NEGATIVE_INFINITY","POSITIVE_INFINITY"],o=0;o<n.length;o++)this.setProperty(this.NUMBER,n[o],Number[n[o]],Lt.READONLY_NONENUMERABLE_DESCRIPTOR);t=function(e){try{return Number(this).toExponential(e)}catch(e){r.throwException(r.ERROR,e.message)}},this.setNativeFunctionPrototype(this.NUMBER,"toExponential",t),t=function(e){try{return Number(this).toFixed(e)}catch(e){r.throwException(r.ERROR,e.message)}},this.setNativeFunctionPrototype(this.NUMBER,"toFixed",t),t=function(e){try{return Number(this).toPrecision(e)}catch(e){r.throwException(r.ERROR,e.message)}},this.setNativeFunctionPrototype(this.NUMBER,"toPrecision",t),t=function(e){try{return Number(this).toString(e)}catch(e){r.throwException(r.ERROR,e.message)}},this.setNativeFunctionPrototype(this.NUMBER,"toString",t),t=function(e,t){return e=e?r.pseudoToNative(e):void 0,t=t?r.pseudoToNative(t):void 0,Number(this).toLocaleString(e,t)},this.setNativeFunctionPrototype(this.NUMBER,"toLocaleString",t)},Lt.prototype.initDate=function(e){var t,r=this;t=function(e,t){if(!r.calledWithNew())return Date();var n=[null].concat(Array.from(arguments));return this.data=new(Function.prototype.bind.apply(Date,n)),this},this.DATE=this.createNativeFunction(t,!0),this.DATE_PROTO=this.DATE.properties.prototype,this.setProperty(e,"Date",this.DATE),this.setProperty(this.DATE,"now",this.createNativeFunction(Date.now,!1),Lt.NONENUMERABLE_DESCRIPTOR),this.setProperty(this.DATE,"parse",this.createNativeFunction(Date.parse,!1),Lt.NONENUMERABLE_DESCRIPTOR),this.setProperty(this.DATE,"UTC",this.createNativeFunction(Date.UTC,!1),Lt.NONENUMERABLE_DESCRIPTOR);for(var n=["getDate","getDay","getFullYear","getHours","getMilliseconds","getMinutes","getMonth","getSeconds","getTime","getTimezoneOffset","getUTCDate","getUTCDay","getUTCFullYear","getUTCHours","getUTCMilliseconds","getUTCMinutes","getUTCMonth","getUTCSeconds","getYear","setDate","setFullYear","setHours","setMilliseconds","setMinutes","setMonth","setSeconds","setTime","setUTCDate","setUTCFullYear","setUTCHours","setUTCMilliseconds","setUTCMinutes","setUTCMonth","setUTCSeconds","setYear","toDateString","toISOString","toJSON","toGMTString","toLocaleDateString","toLocaleString","toLocaleTimeString","toTimeString","toUTCString"],o=0;o<n.length;o++)t=function(e){return function(t){for(var n=[],o=0;o<arguments.length;o++)n[o]=r.pseudoToNative(arguments[o]);return this.data[e].apply(this.data,n)}}(n[o]),this.setNativeFunctionPrototype(this.DATE,n[o],t)},Lt.prototype.initRegExp=function(e){var t,r=this;t=function(e,t){if(r.calledWithNew())var n=this;else n=r.createObjectProto(r.REGEXP_PROTO);return e=e?String(e):"",t=t?String(t):"",r.populateRegExp(n,new RegExp(e,t)),n},this.REGEXP=this.createNativeFunction(t,!0),this.REGEXP_PROTO=this.REGEXP.properties.prototype,this.setProperty(e,"RegExp",this.REGEXP),this.setProperty(this.REGEXP.properties.prototype,"global",void 0,Lt.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(this.REGEXP.properties.prototype,"ignoreCase",void 0,Lt.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(this.REGEXP.properties.prototype,"multiline",void 0,Lt.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(this.REGEXP.properties.prototype,"source","(?:)",Lt.READONLY_NONENUMERABLE_DESCRIPTOR),this.polyfills_.push("Object.defineProperty(RegExp.prototype, 'test',","{configurable: true, writable: true, value:","function(str) {","return String(str).search(this) !== -1","}","});"),t=function(e,t){var n=this.data;if(e=String(e),n.lastIndex=Number(r.getProperty(this,"lastIndex")),r.maybeThrowRegExp(n,t),2!==r.REGEXP_MODE)o=n.exec(e),r.setProperty(this,"lastIndex",n.lastIndex),t(p(o));else if(Lt.vm){var o,i={string:e,regexp:n};(o=r.vmCall("regexp.exec(string)",i,n,t))!==Lt.REGEXP_TIMEOUT&&(r.setProperty(this,"lastIndex",n.lastIndex),t(p(o)))}else{var a=r.createWorker(),s=r.regExpTimeout(n,a,t),c=this;a.onmessage=function(e){clearTimeout(s),r.setProperty(c,"lastIndex",e.data[1]),t(p(e.data[0]))},a.postMessage(["exec",n,n.lastIndex,e])}function p(e){if(e){var t=r.arrayNativeToPseudo(e);return r.setProperty(t,"index",e.index),r.setProperty(t,"input",e.input),t}return null}},this.setAsyncFunctionPrototype(this.REGEXP,"exec",t)},Lt.prototype.initError=function(e){var t=this;this.ERROR=this.createNativeFunction((function(e){if(t.calledWithNew())var r=this;else r=t.createObject(t.ERROR);return e&&t.setProperty(r,"message",String(e),Lt.NONENUMERABLE_DESCRIPTOR),r}),!0),this.setProperty(e,"Error",this.ERROR),this.setProperty(this.ERROR.properties.prototype,"message","",Lt.NONENUMERABLE_DESCRIPTOR),this.setProperty(this.ERROR.properties.prototype,"name","Error",Lt.NONENUMERABLE_DESCRIPTOR);var r=function(r){var n=t.createNativeFunction((function(e){if(t.calledWithNew())var r=this;else r=t.createObject(n);return e&&t.setProperty(r,"message",String(e),Lt.NONENUMERABLE_DESCRIPTOR),r}),!0);return t.setProperty(n,"prototype",t.createObject(t.ERROR),Lt.NONENUMERABLE_DESCRIPTOR),t.setProperty(n.properties.prototype,"name",r,Lt.NONENUMERABLE_DESCRIPTOR),t.setProperty(e,r,n),n};this.EVAL_ERROR=r("EvalError"),this.RANGE_ERROR=r("RangeError"),this.REFERENCE_ERROR=r("ReferenceError"),this.SYNTAX_ERROR=r("SyntaxError"),this.TYPE_ERROR=r("TypeError"),this.URI_ERROR=r("URIError")},Lt.prototype.initMath=function(e){var t=this.createObjectProto(this.OBJECT_PROTO);this.setProperty(e,"Math",t);for(var r=["E","LN2","LN10","LOG2E","LOG10E","PI","SQRT1_2","SQRT2"],n=0;n<r.length;n++)this.setProperty(t,r[n],Math[r[n]],Lt.READONLY_NONENUMERABLE_DESCRIPTOR);var o=["abs","acos","asin","atan","atan2","ceil","cos","exp","floor","log","max","min","pow","random","round","sin","sqrt","tan"];for(n=0;n<o.length;n++)this.setProperty(t,o[n],this.createNativeFunction(Math[o[n]],!1),Lt.NONENUMERABLE_DESCRIPTOR)},Lt.prototype.initJSON=function(e){var t=this,r=t.createObjectProto(this.OBJECT_PROTO);this.setProperty(e,"JSON",r);var n=function(e){try{var r=JSON.parse(String(e))}catch(e){t.throwException(t.SYNTAX_ERROR,e.message)}return t.nativeToPseudo(r)};this.setProperty(r,"parse",this.createNativeFunction(n,!1)),n=function(e,r,n){r&&"Function"===r.class?t.throwException(t.TYPE_ERROR,"Function replacer on JSON.stringify not supported"):r=r&&"Array"===r.class?(r=t.arrayPseudoToNative(r)).filter((function(e){return"string"==typeof e||"number"==typeof e})):null,"string"!=typeof n&&"number"!=typeof n&&(n=void 0);var o=t.pseudoToNative(e);try{var i=JSON.stringify(o,r,n)}catch(e){t.throwException(t.TYPE_ERROR,e.message)}return i},this.setProperty(r,"stringify",this.createNativeFunction(n,!1))},Lt.prototype.isa=function(e,t){if(null==e||!t)return!1;var r=t.properties.prototype;if(e===r)return!0;for(e=this.getPrototype(e);e;){if(e===r)return!0;e=e.proto}return!1},Lt.prototype.populateRegExp=function(e,t){e.data=new RegExp(t.source,t.flags),this.setProperty(e,"lastIndex",t.lastIndex,Lt.NONENUMERABLE_DESCRIPTOR),this.setProperty(e,"source",t.source,Lt.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(e,"global",t.global,Lt.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(e,"ignoreCase",t.ignoreCase,Lt.READONLY_NONENUMERABLE_DESCRIPTOR),this.setProperty(e,"multiline",t.multiline,Lt.READONLY_NONENUMERABLE_DESCRIPTOR)},Lt.prototype.createWorker=function(){var e=this.createWorker.blob_;return e||(e=new Blob([Lt.WORKER_CODE.join("\n")],{type:"application/javascript"}),this.createWorker.blob_=e),new Worker(URL.createObjectURL(e))},Lt.prototype.vmCall=function(e,t,r,n){var o={timeout:this.REGEXP_THREAD_TIMEOUT};try{return Lt.vm.runInNewContext(e,t,o)}catch(e){n(null),this.throwException(this.ERROR,"RegExp Timeout: "+r)}return Lt.REGEXP_TIMEOUT},Lt.prototype.maybeThrowRegExp=function(e,t){var n;if(0===this.REGEXP_MODE)n=!1;else if(1===this.REGEXP_MODE)n=!0;else if(Lt.vm)n=!0;else if("function"==typeof Worker&&"function"==typeof URL)n=!0;else{try{Lt.vm=r(790)}catch(e){}n=!!Lt.vm}n||(t(null),this.throwException(this.ERROR,"Regular expressions not supported: "+e))},Lt.prototype.regExpTimeout=function(e,t,r){var n=this;return setTimeout((function(){t.terminate(),r(null);try{n.throwException(n.ERROR,"RegExp Timeout: "+e)}catch(e){}}),this.REGEXP_THREAD_TIMEOUT)},Lt.prototype.createObject=function(e){return this.createObjectProto(e&&e.properties.prototype)},Lt.prototype.createObjectProto=function(e){if("object"!=typeof e)throw Error("Non object prototype");var t=new Lt.Object(e);return this.isa(t,this.ERROR)&&(t.class="Error"),t},Lt.prototype.createArray=function(){var e=this.createObjectProto(this.ARRAY_PROTO);return this.setProperty(e,"length",0,{configurable:!1,enumerable:!1,writable:!0}),e.class="Array",e},Lt.prototype.createFunctionBase_=function(e,t){var r=this.createObjectProto(this.FUNCTION_PROTO);if(t){var n=this.createObjectProto(this.OBJECT_PROTO);this.setProperty(r,"prototype",n,Lt.NONENUMERABLE_DESCRIPTOR),this.setProperty(n,"constructor",r,Lt.NONENUMERABLE_DESCRIPTOR)}else r.illegalConstructor=!0;return this.setProperty(r,"length",e,Lt.READONLY_NONENUMERABLE_DESCRIPTOR),r.class="Function",r},Lt.prototype.createFunction=function(e,t,r){var n=this.createFunctionBase_(e.params.length,!0);n.parentScope=t,n.node=e;var o=e.id?String(e.id.name):r||"";return this.setProperty(n,"name",o,Lt.READONLY_NONENUMERABLE_DESCRIPTOR),n},Lt.prototype.createNativeFunction=function(e,t){var r=this.createFunctionBase_(e.length,t);return r.nativeFunc=e,e.id=this.functionCounter_++,this.setProperty(r,"name",e.name,Lt.READONLY_NONENUMERABLE_DESCRIPTOR),r},Lt.prototype.createAsyncFunction=function(e){var t=this.createFunctionBase_(e.length,!0);return t.asyncFunc=e,e.id=this.functionCounter_++,this.setProperty(t,"name",e.name,Lt.READONLY_NONENUMERABLE_DESCRIPTOR),t},Lt.prototype.nativeToPseudo=function(e){if(e instanceof Lt.Object)throw Error("Object is already pseudo");if("object"!=typeof e&&"function"!=typeof e||null===e)return e;if(e instanceof RegExp){var t=this.createObjectProto(this.REGEXP_PROTO);return this.populateRegExp(t,e),t}if(e instanceof Date){var r=this.createObjectProto(this.DATE_PROTO);return r.data=new Date(e.valueOf()),r}if("object"==typeof e&&e.hasOwnProperty("_s8async"))return this.createAsyncFunction(e.run);if("function"==typeof e){var n=this,o=Object.getOwnPropertyDescriptor(e,"prototype");return this.createNativeFunction((function(){var t=Array.prototype.slice.call(arguments).map((function(e){return n.pseudoToNative(e)})),r=e.apply(n,t);return n.nativeToPseudo(r)}),!!o)}if(Array.isArray(e)){for(var i=this.createArray(),a=0;a<e.length;a++)a in e&&this.setProperty(i,a,this.nativeToPseudo(e[a]));return i}var s=this.createObjectProto(this.OBJECT_PROTO);for(var c in e)this.setProperty(s,c,this.nativeToPseudo(e[c]));return s},Lt.prototype.pseudoToNative=function(e,t){if("object"!=typeof e&&"function"!=typeof e||null===e)return e;if(!(e instanceof Lt.Object))throw Error("Object is not pseudo");if(this.isa(e,this.REGEXP)){var r=new RegExp(e.data.source,e.data.flags);return r.lastIndex=e.data.lastIndex,r}if(this.isa(e,this.DATE))return new Date(e.data.valueOf());var n,o=t||{pseudo:[],native:[]};if(-1!==(a=o.pseudo.indexOf(e)))return o.native[a];if(o.pseudo.push(e),this.isa(e,this.ARRAY)){n=[],o.native.push(n);for(var i=this.getProperty(e,"length"),a=0;a<i;a++)this.hasProperty(e,a)&&(n[a]=this.pseudoToNative(this.getProperty(e,a),o))}else{var s;for(var c in n={},o.native.push(n),e.properties)s=this.pseudoToNative(e.properties[c],o),Object.defineProperty(n,c,{value:s,writable:!0,enumerable:!0,configurable:!0})}return o.pseudo.pop(),o.native.pop(),n},Lt.prototype.arrayNativeToPseudo=function(e){for(var t=this.createArray(),r=Object.getOwnPropertyNames(e),n=0;n<r.length;n++)this.setProperty(t,r[n],e[r[n]]);return t},Lt.prototype.arrayPseudoToNative=function(e){var t=[];for(var r in e.properties)t[r]=this.getProperty(e,r);return t.length=Lt.legalArrayLength(this.getProperty(e,"length"))||0,t},Lt.prototype.getPrototype=function(e){switch(typeof e){case"number":return this.NUMBER.properties.prototype;case"boolean":return this.BOOLEAN.properties.prototype;case"string":return this.STRING.properties.prototype}return e?e.proto:null},Lt.prototype.getProperty=function(e,t){if(this.getterStep_)throw Error("Getter not supported in that context");if(t=String(t),null==e&&this.throwException(this.TYPE_ERROR,"Cannot read property '"+t+"' of "+e),"object"==typeof e&&!(e instanceof Lt.Object))throw TypeError("Expecting native value or pseudo object");if("length"===t){if(this.isa(e,this.STRING))return String(e).length}else if(t.charCodeAt(0)<64&&this.isa(e,this.STRING)){var r=Lt.legalArrayIndex(t);if(!isNaN(r)&&r<String(e).length)return String(e)[r]}do{if(e.properties&&t in e.properties){var n=e.getter[t];return n?(this.getterStep_=!0,n):e.properties[t]}}while(e=this.getPrototype(e))},Lt.prototype.hasProperty=function(e,t){if(!(e instanceof Lt.Object))throw TypeError("Primitive data type has no properties");if("length"===(t=String(t))&&this.isa(e,this.STRING))return!0;if(this.isa(e,this.STRING)){var r=Lt.legalArrayIndex(t);if(!isNaN(r)&&r<String(e).length)return!0}do{if(e.properties&&t in e.properties)return!0}while(e=this.getPrototype(e));return!1},Lt.prototype.setProperty=function(e,t,r,n){if(this.setterStep_)throw Error("Setter not supported in that context");if(t=String(t),null==e&&this.throwException(this.TYPE_ERROR,"Cannot set property '"+t+"' of "+e),"object"==typeof e&&!(e instanceof Lt.Object))throw TypeError("Expecting native value or pseudo object");n&&("get"in n||"set"in n)&&("value"in n||"writable"in n)&&this.throwException(this.TYPE_ERROR,"Invalid property descriptor. Cannot both specify accessors and a value or writable attribute");var o=!this.stateStack||this.getScope().strict;if(e instanceof Lt.Object){if(this.isa(e,this.STRING)){var i=Lt.legalArrayIndex(t);if("length"===t||!isNaN(i)&&i<String(e).length)return void(o&&this.throwException(this.TYPE_ERROR,"Cannot assign to read only property '"+t+"' of String '"+e.data+"'"))}if("Array"===e.class){var a,s=e.properties.length;if("length"===t){if(n){if(!("value"in n))return;r=n.value}if(r=Lt.legalArrayLength(r),isNaN(r)&&this.throwException(this.RANGE_ERROR,"Invalid array length"),r<s)for(a in e.properties)a=Lt.legalArrayIndex(a),!isNaN(a)&&r<=a&&delete e.properties[a]}else isNaN(a=Lt.legalArrayIndex(t))||(e.properties.length=Math.max(s,a+1))}if(!e.preventExtensions||t in e.properties)if(n){var c={};"get"in n&&n.get&&(e.getter[t]=n.get,c.get=this.setProperty.placeholderGet_),"set"in n&&n.set&&(e.setter[t]=n.set,c.set=this.setProperty.placeholderSet_),c={},"configurable"in n&&(c.configurable=n.configurable),"enumerable"in n&&(c.enumerable=n.enumerable),"writable"in n&&(c.writable=n.writable,delete e.getter[t],delete e.setter[t]),"value"in n?(c.value=n.value,delete e.getter[t],delete e.setter[t]):r!==Lt.VALUE_IN_DESCRIPTOR&&(c.value=r,delete e.getter[t],delete e.setter[t]);try{Object.defineProperty(e.properties,t,c)}catch(e){this.throwException(this.TYPE_ERROR,"Cannot redefine property: "+t)}"get"in n&&!n.get&&delete e.getter[t],"set"in n&&!n.set&&delete e.setter[t]}else{if(r===Lt.VALUE_IN_DESCRIPTOR)throw ReferenceError("Value not specified.");for(var p=e;!(t in p.properties);)if(!(p=this.getPrototype(p))){p=e;break}if(p.setter&&p.setter[t])return this.setterStep_=!0,p.setter[t];if(p.getter&&p.getter[t])o&&this.throwException(this.TYPE_ERROR,"Cannot set property '"+t+"' of object '"+e+"' which only has a getter");else try{e.properties[t]=r}catch(r){o&&this.throwException(this.TYPE_ERROR,"Cannot assign to read only property '"+t+"' of object '"+e+"'")}}else o&&this.throwException(this.TYPE_ERROR,"Can't add property '"+t+"', object is not extensible")}else o&&this.throwException(this.TYPE_ERROR,"Can't create property '"+t+"' on '"+e+"'")},Lt.prototype.setProperty.placeholderGet_=function(){throw Error("Placeholder getter")},Lt.prototype.setProperty.placeholderSet_=function(){throw Error("Placeholder setter")},Lt.prototype.setNativeFunctionPrototype=function(e,t,r){this.setProperty(e.properties.prototype,t,this.createNativeFunction(r,!1),Lt.NONENUMERABLE_DESCRIPTOR)},Lt.prototype.setAsyncFunctionPrototype=function(e,t,r){this.setProperty(e.properties.prototype,t,this.createAsyncFunction(r),Lt.NONENUMERABLE_DESCRIPTOR)},Lt.prototype.getScope=function(){var e=this.stateStack[this.stateStack.length-1].scope;if(!e)throw Error("No scope found.");return e},Lt.prototype.createScope=function(e,t){var r=!1;if(t&&t.strict)r=!0;else{var n=e.body&&e.body[0];n&&n.expression&&"Literal"===n.expression.type&&"use strict"===n.expression.value&&(r=!0)}var o=this.createObjectProto(null),i=new Lt.Scope(t,r,o);return t||this.initGlobal(i.object),this.populateScope_(e,i),i},Lt.prototype.createSpecialScope=function(e,t){if(!e)throw Error("parentScope required");var r=t||this.createObjectProto(null);return new Lt.Scope(e,e.strict,r)},Lt.prototype.getValueFromScope=function(e){for(var t=this.getScope();t&&t!==this.globalScope;){if(e in t.object.properties)return t.object.properties[e];t=t.parentScope}if(t===this.globalScope&&this.hasProperty(t.object,e))return this.getProperty(t.object,e);var r=this.stateStack[this.stateStack.length-1].node;"UnaryExpression"===r.type&&"typeof"===r.operator||this.throwException(this.REFERENCE_ERROR,e+" is not defined")},Lt.prototype.setValueToScope=function(e,t){for(var r=this.getScope(),n=r.strict;r&&r!==this.globalScope;){if(e in r.object.properties)return void(r.object.properties[e]=t);r=r.parentScope}if(r===this.globalScope&&(!n||this.hasProperty(r.object,e)))return this.setProperty(r.object,e,t);this.throwException(this.REFERENCE_ERROR,e+" is not defined")},Lt.prototype.populateScope_=function(e,t){if("VariableDeclaration"===e.type)for(var r=0;r<e.declarations.length;r++)this.setProperty(t.object,e.declarations[r].id.name,void 0,Lt.VARIABLE_DESCRIPTOR);else{if("FunctionDeclaration"===e.type)return void this.setProperty(t.object,e.id.name,this.createFunction(e,t),Lt.VARIABLE_DESCRIPTOR);if("FunctionExpression"===e.type)return;if("ExpressionStatement"===e.type)return}var n=e.constructor;for(var o in e){var i=e[o];if(i&&"object"==typeof i)if(Array.isArray(i))for(r=0;r<i.length;r++)i[r]&&i[r].constructor===n&&this.populateScope_(i[r],t);else i.constructor===n&&this.populateScope_(i,t)}},Lt.prototype.calledWithNew=function(){return this.stateStack[this.stateStack.length-1].isConstructor},Lt.prototype.getValue=function(e){return e[0]===Lt.SCOPE_REFERENCE?this.getValueFromScope(e[1]):this.getProperty(e[0],e[1])},Lt.prototype.setValue=function(e,t){return e[0]===Lt.SCOPE_REFERENCE?this.setValueToScope(e[1],t):this.setProperty(e[0],e[1],t)},Lt.prototype.throwException=function(e,t){if(void 0===t)var r=e;else r=this.createObject(e),this.setProperty(r,"message",t,Lt.NONENUMERABLE_DESCRIPTOR);throw this.unwind(Lt.Completion.THROW,r,void 0),Lt.STEP_ERROR},Lt.prototype.createThrowable=function(e,t){return new Lt.Throwable(e,t)},Lt.prototype.handleNativeResult_=function(e,t,r){if(r instanceof Lt.Callback)return r.pushState_(this,t),e.cb_=r,e.doneExec_=!1,r.state_;if(r instanceof Lt.Throwable)r.throw_(this);else{var n=e.cb_;n&&(n.stateless_?n.value=r:n.state_.value=r),e.value=r}},Lt.prototype.unwind=function(e,t,r){if(e===Lt.Completion.NORMAL)throw TypeError("Should not unwind for NORMAL completions");e:for(var n=this.stateStack;n.length>0;n.pop()){var o=n[n.length-1];switch(o.node.type){case"TryStatement":return void(o.cv={type:e,value:t,label:r});case"CallExpression":case"NewExpression":if(e===Lt.Completion.RETURN)return void(o.value=t);if(e!==Lt.Completion.THROW)throw Error("Unsynatctic break/continue not rejected by Acorn");break;case"CallExpressionFunc_":if(e===Lt.Completion.THROW&&o.catch_)return void(o.throw_=t);continue;case"Program":o.done=!0;break e}if(e===Lt.Completion.BREAK){if(r?o.labels&&-1!==o.labels.indexOf(r):o.isLoop||o.isSwitch)return void n.pop()}else if(e===Lt.Completion.CONTINUE&&(r?o.labels&&-1!==o.labels.indexOf(r):o.isLoop))return}var i;if(this.isa(t,this.ERROR)){var a={EvalError,RangeError,ReferenceError,SyntaxError,TypeError,URIError},s=String(this.getProperty(t,"name")),c=this.getProperty(t,"message").valueOf();i=(a[s]||Error)(c)}else i=String(t);throw i},Lt.prototype.createGetter_=function(e,t){if(!this.getterStep_)throw Error("Unexpected call to createGetter");this.getterStep_=!1;var r=Array.isArray(t)?t[0]:t,n=new this.nodeConstructor({options:{}});n.type="CallExpression";var o=new Lt.State(n,this.stateStack[this.stateStack.length-1].scope);return o.doneCallee_=!0,o.funcThis_=r,o.func_=e,o.doneArgs_=!0,o.arguments_=[],o},Lt.prototype.createSetter_=function(e,t,r){if(!this.setterStep_)throw Error("Unexpected call to createSetter");this.setterStep_=!1;var n=Array.isArray(t)?t[0]:this.globalObject,o=new this.nodeConstructor({options:{}});o.type="CallExpression";var i=new Lt.State(o,this.stateStack[this.stateStack.length-1].scope);return i.doneCallee_=!0,i.funcThis_=n,i.func_=e,i.doneArgs_=!0,i.arguments_=[r],i},Lt.prototype.boxThis_=function(e){if(null==e)return this.globalObject;if(!(e instanceof Lt.Object)){var t=this.createObjectProto(this.getPrototype(e));return t.data=e,t}return e},Lt.Value,Lt.State=function(e,t){this.node=e,this.scope=t},Lt.Scope=function(e,t,r){this.parentScope=e,this.strict=t,this.object=r},Lt.Throwable=function(e,t){this.errorClass=e,this.opt_message=t},Lt.Throwable.prototype.throw_=function(e){e.throwException(this.errorClass,this.opt_message)},Lt.Callback=function(e,t){this.node_=e,this.handlers_=[],this.catch_=null,this.node_.cb_=this,this.queued_=t},Lt.Callback.prototype.then=function(e){if("function"!=typeof e)throw new Error('Expected function for "then" handler');return this.handlers_.push(e),this},Lt.Callback.prototype.catch=function(e){if("function"!=typeof e)throw new Error('Expected function for "catch" handler');if(this.catch_)throw new Error('"catch" already defined');return this.catch_=e,this},Lt.Callback.prototype.pushState_=function(e,t){this.stateless_||(this.state_||(this.state_=new Lt.State(this.node_,t)),e.stateStack.push(this.state_))},Lt.Callback.prototype.doNext_=function(e){var t=this.handlers_.shift();return t?(this.force_=this.handlers_.length,t(this.stateless_?this.value:this.state_.value,e)):this.stateless_?void 0:e?void e(this.state_.value):this.state_.value},Lt.Object=function(e){this.getter=Object.create(null),this.setter=Object.create(null),this.properties=Object.create(null),this.proto=e},Lt.Object.prototype.proto=null,Lt.Object.prototype.class="Object",Lt.Object.prototype.data=null,Lt.Object.prototype.toString=function(){if(!(this instanceof Lt.Object))return String(this);if("Array"===this.class){(i=Lt.toStringCycles_).push(this);try{var e=[],t=this.properties.length,r=!1;t>1024&&(t=1e3,r=!0);for(var n=0;n<t;n++){var o=this.properties[n];e[n]=o instanceof Lt.Object&&-1!==i.indexOf(o)?"...":o}r&&e.push("...")}finally{i.pop()}return e.join(",")}if("Error"===this.class){var i,a,s;if(-1!==(i=Lt.toStringCycles_).indexOf(this))return"[object Error]";var c=this;do{if("name"in c.properties){a=c.properties.name;break}}while(c=c.proto);c=this;do{if("message"in c.properties){s=c.properties.message;break}}while(c=c.proto);i.push(this);try{a=a&&String(a),s=s&&String(s)}finally{i.pop()}return s?a+": "+s:String(a)}return null!==this.data?String(this.data):"[object "+this.class+"]"},Lt.Object.prototype.valueOf=function(){return void 0===this.data||null===this.data||this.data instanceof RegExp?this:this.data instanceof Date?this.data.valueOf():this.data},Lt.prototype.stepArrayExpression=function(e,t,r){var n=r.elements,o=t.n_||0;for(t.array_?(this.setProperty(t.array_,o,t.value),o++):(t.array_=this.createArray(),t.array_.properties.length=n.length);o<n.length;){if(n[o])return t.n_=o,new Lt.State(n[o],t.scope);o++}e.pop(),e[e.length-1].value=t.array_},Lt.prototype.stepAssignmentExpression=function(e,t,r){if(!t.doneLeft_){t.doneLeft_=!0;var n=new Lt.State(r.left,t.scope);return n.components=!0,n}if(!t.doneRight_){if(t.leftReference_||(t.leftReference_=t.value),t.doneGetter_&&(t.leftValue_=t.value),!t.doneGetter_&&"="!==r.operator){var o=this.getValue(t.leftReference_);if(t.leftValue_=o,this.getterStep_){t.doneGetter_=!0;var i=o;return this.createGetter_(i,t.leftReference_)}}return t.doneRight_=!0,"="===r.operator&&"Identifier"===r.left.type&&(t.destinationName=r.left.name),new Lt.State(r.right,t.scope)}if(t.doneSetter_)return e.pop(),void(e[e.length-1].value=t.setterValue_);var a=t.leftValue_,s=t.value;switch(r.operator){case"=":a=s;break;case"+=":a+=s;break;case"-=":a-=s;break;case"*=":a*=s;break;case"/=":a/=s;break;case"%=":a%=s;break;case"<<=":a<<=s;break;case">>=":a>>=s;break;case">>>=":a>>>=s;break;case"&=":a&=s;break;case"^=":a^=s;break;case"|=":a|=s;break;default:throw SyntaxError("Unknown assignment expression: "+r.operator)}var c=this.setValue(t.leftReference_,a);if(c)return t.doneSetter_=!0,t.setterValue_=a,this.createSetter_(c,t.leftReference_,a);e.pop(),e[e.length-1].value=a},Lt.prototype.stepBinaryExpression=function(e,t,r){if(!t.doneLeft_)return t.doneLeft_=!0,new Lt.State(r.left,t.scope);if(!t.doneRight_)return t.doneRight_=!0,t.leftValue_=t.value,new Lt.State(r.right,t.scope);e.pop();var n,o=t.leftValue_,i=t.value;switch(r.operator){case"==":n=o==i;break;case"!=":n=o!=i;break;case"===":n=o===i;break;case"!==":n=o!==i;break;case">":n=o>i;break;case">=":n=o>=i;break;case"<":n=o<i;break;case"<=":n=o<=i;break;case"+":n=o+i;break;case"-":n=o-i;break;case"*":n=o*i;break;case"/":n=o/i;break;case"%":n=o%i;break;case"&":n=o&i;break;case"|":n=o|i;break;case"^":n=o^i;break;case"<<":n=o<<i;break;case">>":n=o>>i;break;case">>>":n=o>>>i;break;case"in":i instanceof Lt.Object||this.throwException(this.TYPE_ERROR,"'in' expects an object, not '"+i+"'"),n=this.hasProperty(i,o);break;case"instanceof":this.isa(i,this.FUNCTION)||this.throwException(this.TYPE_ERROR,"Right-hand side of instanceof is not an object"),n=o instanceof Lt.Object&&this.isa(o,i);break;default:throw SyntaxError("Unknown binary operator: "+r.operator)}e[e.length-1].value=n},Lt.prototype.stepBlockStatement=function(e,t,r){var n=t.n_||0,o=r.body[n];if(o)return t.n_=n+1,new Lt.State(o,t.scope);e.pop()},Lt.prototype.stepBreakStatement=function(e,t,r){var n=r.label&&r.label.name;this.unwind(Lt.Completion.BREAK,void 0,n)},Lt.prototype.stepCallExpression=function(t,r,n){if(!r.doneCallee_){r.doneCallee_=1;var o=new Lt.State(n.callee,r.scope);return o.components=!0,o}if(1===r.doneCallee_){r.doneCallee_=2;var i=r.value;if(Array.isArray(i)){if(r.func_=this.getValue(i),i[0]===Lt.SCOPE_REFERENCE?r.directEval_="eval"===i[1]:r.funcThis_=i[0],i=r.func_,this.getterStep_)return r.doneCallee_=1,this.createGetter_(i,r.value)}else r.func_=i;r.arguments_=[],r.n_=0}if(i=r.func_,!r.doneArgs_){if(0!==r.n_&&r.arguments_.push(r.value),n.arguments[r.n_])return new Lt.State(n.arguments[r.n_++],r.scope);if("NewExpression"===n.type){if(i instanceof Lt.Object&&!i.illegalConstructor||this.throwException(this.TYPE_ERROR,i+" is not a constructor"),i===this.ARRAY)r.funcThis_=this.createArray();else{var a=i.properties.prototype;"object"==typeof a&&null!==a||(a=this.OBJECT_PROTO),r.funcThis_=this.createObjectProto(a)}r.isConstructor=!0}else void 0===r.funcThis_&&(r.funcThis_=r.scope.strict?void 0:this.globalObject);r.doneArgs_=!0}if(r.cb_&&r.cb_.force_&&(r.doneExec_=!1,r.cb_.force_=!1),r.doneExec_)t.pop(),r.isConstructor&&"object"!=typeof r.value?t[t.length-1].value=r.funcThis_:t[t.length-1].value=r.value;else{r.doneExec_=!0,i instanceof Lt.Object||this.throwException(this.TYPE_ERROR,i+" is not a function");var s=i.node;if(s){for(var c=this.createScope(s.body,i.parentScope),p=0;p<s.params.length;p++){var u=s.params[p].name,l=r.arguments_.length>p?r.arguments_[p]:void 0;this.setProperty(c.object,u,l)}var h=this.createArray();for(p=0;p<r.arguments_.length;p++)this.setProperty(h,p,r.arguments_[p]);this.setProperty(c.object,"arguments",h);var f=s.id&&s.id.name;return f&&this.setProperty(c.object,f,i),c.strict||(r.funcThis_=this.boxThis_(r.funcThis_)),this.setProperty(c.object,"this",r.funcThis_,Lt.READONLY_DESCRIPTOR),r.value=void 0,new Lt.State(s.body,c)}if(i.eval){var d=r.arguments_[0];if("string"==typeof d){try{var y=e.parse(String(d),Lt.PARSE_OPTIONS)}catch(e){this.throwException(this.SYNTAX_ERROR,"Invalid code: "+e.message)}var E=new this.nodeConstructor({options:{}});return E.type="EvalProgram_",E.body=y.body,Lt.stripLocations_(E,n.start,n.end),(c=r.directEval_?r.scope:this.globalScope).strict?c=this.createScope(y,c):this.populateScope_(y,c),this.value=void 0,new Lt.State(E,c)}r.value=d}else{if(i.nativeFunc)return r.scope.strict||(r.funcThis_=this.boxThis_(r.funcThis_)),void this.handleNativeResult_(r,c,r.cb_?r.cb_.doNext_():i.nativeFunc.apply(r.funcThis_,r.arguments_));if(i.asyncFunc){var v=this,g=function(e){r.value=e,v.paused_=!1,v.handleNativeResult_(r,c,e)};if(this.paused_=!0,r.cb_)return void r.cb_.doNext_(g);var b=i.asyncFunc.length-1,_=r.arguments_.concat(new Array(b)).slice(0,b);return _.push(g),r.scope.strict||(r.funcThis_=this.boxThis_(r.funcThis_)),void i.asyncFunc.apply(r.funcThis_,_)}this.throwException(this.TYPE_ERROR,i.class+" is not callable")}}},Lt.prototype.stepCatchClause=function(e,t,r){if(!t.done_){t.done_=!0;var n=this.createSpecialScope(t.scope);return this.setProperty(n.object,r.param.name,t.throwValue),new Lt.State(r.body,n)}e.pop()},Lt.prototype.stepConditionalExpression=function(e,t,r){var n=t.mode_||0;if(0===n)return t.mode_=1,new Lt.State(r.test,t.scope);if(1===n){t.mode_=2;var o=Boolean(t.value);if(o&&r.consequent)return new Lt.State(r.consequent,t.scope);if(!o&&r.alternate)return new Lt.State(r.alternate,t.scope);this.value=void 0}e.pop(),"ConditionalExpression"===r.type&&(e[e.length-1].value=t.value)},Lt.prototype.stepContinueStatement=function(e,t,r){var n=r.label&&r.label.name;this.unwind(Lt.Completion.CONTINUE,void 0,n)},Lt.prototype.stepDebuggerStatement=function(e,t,r){e.pop()},Lt.prototype.stepDoWhileStatement=function(e,t,r){if("DoWhileStatement"===r.type&&void 0===t.test_&&(t.value=!0,t.test_=!0),!t.test_)return t.test_=!0,new Lt.State(r.test,t.scope);if(t.value){if(r.body)return t.test_=!1,t.isLoop=!0,new Lt.State(r.body,t.scope)}else e.pop()},Lt.prototype.stepEmptyStatement=function(e,t,r){e.pop()},Lt.prototype.stepEvalProgram_=function(e,t,r){var n=t.n_||0,o=r.body[n];if(o)return t.n_=n+1,new Lt.State(o,t.scope);e.pop(),e[e.length-1].value=this.value},Lt.prototype.stepCallExpressionFunc_=function(e,t,r){var n=r.cb_,o=n.queued_;if(!t.done_){t.done_=!0;var i=new this.nodeConstructor({options:{}});i.type="CallExpression";var a=new Lt.State(i,r.scope_||t.scope);return a.doneCallee_=!0,a.funcThis_=r.funcThis_,a.func_=r.func_,a.doneArgs_=!0,a.arguments_=r.arguments_,t.catch_=n.catch_,a}if(o&&n.handlers_.length&&!t.throw_){var s=n.handlers_.shift();this.handleNativeResult_(t,r.funcThis_,s(t.value))}else{if(t.catch_&&t.throw_){if(o)return this.handleNativeResult_(t,r.funcThis_,t.catch_(t.throw_)),void(t.catch_=null);n.stateless_=!0,n.handlers_=[t.catch_],n.value=t.throw_,n.force_=!0}e.pop(),1===this.stateStack.length&&(this.value=t.value)}},Lt.prototype.stepExpressionStatement=function(e,t,r){if(!t.done_)return t.done_=!0,new Lt.State(r.expression,t.scope);e.pop(),this.value=t.value},Lt.prototype.stepForInStatement=function(e,t,r){if(!t.doneInit_&&(t.doneInit_=!0,r.left.declarations&&r.left.declarations[0].init))return t.scope.strict&&this.throwException(this.SYNTAX_ERROR,"for-in loop variable declaration may not have an initializer."),new Lt.State(r.left,t.scope);if(!t.doneObject_)return t.doneObject_=!0,t.variable_||(t.variable_=t.value),new Lt.State(r.right,t.scope);if(t.isLoop||(t.isLoop=!0,t.object_=t.value,t.visited_=Object.create(null)),void 0===t.name_)e:for(;;){if(t.object_ instanceof Lt.Object){for(t.props_||(t.props_=Object.getOwnPropertyNames(t.object_.properties));void 0!==(n=t.props_.shift());)if(Object.prototype.hasOwnProperty.call(t.object_.properties,n)&&!t.visited_[n]&&(t.visited_[n]=!0,Object.prototype.propertyIsEnumerable.call(t.object_.properties,n))){t.name_=n;break e}}else if(null!==t.object_&&void 0!==t.object_)for(t.props_||(t.props_=Object.getOwnPropertyNames(t.object_));;){var n;if(void 0===(n=t.props_.shift()))break;if(t.visited_[n]=!0,Object.prototype.propertyIsEnumerable.call(t.object_,n)){t.name_=n;break e}}if(t.object_=this.getPrototype(t.object_),t.props_=null,null===t.object_)return void e.pop()}if(!t.doneVariable_){t.doneVariable_=!0;var o=r.left;if("VariableDeclaration"!==o.type){t.variable_=null;var i=new Lt.State(o,t.scope);return i.components=!0,i}t.variable_=[Lt.SCOPE_REFERENCE,o.declarations[0].id.name]}if(t.variable_||(t.variable_=t.value),!t.doneSetter_){t.doneSetter_=!0;var a=t.name_,s=this.setValue(t.variable_,a);if(s)return this.createSetter_(s,t.variable_,a)}return t.name_=void 0,t.doneVariable_=!1,t.doneSetter_=!1,r.body?new Lt.State(r.body,t.scope):void 0},Lt.prototype.stepForStatement=function(e,t,r){var n=t.mode_||0;if(0===n){if(t.mode_=1,r.init)return new Lt.State(r.init,t.scope)}else if(1===n){if(t.mode_=2,r.test)return new Lt.State(r.test,t.scope)}else if(2===n){if(t.mode_=3,!r.test||t.value)return t.isLoop=!0,new Lt.State(r.body,t.scope);e.pop()}else if(3===n&&(t.mode_=1,r.update))return new Lt.State(r.update,t.scope)},Lt.prototype.stepFunctionDeclaration=function(e,t,r){e.pop()},Lt.prototype.stepFunctionExpression=function(e,t,r){e.pop(),(t=e[e.length-1]).value=this.createFunction(r,t.scope,t.destinationName)},Lt.prototype.stepIdentifier=function(e,t,r){if(e.pop(),t.components)e[e.length-1].value=[Lt.SCOPE_REFERENCE,r.name];else{var n=this.getValueFromScope(r.name);if(this.getterStep_){for(var o=t.scope;o!==this.globalScope&&!this.hasProperty(o,r.name);)o=o.parentScope;var i=n;return this.createGetter_(i,this.globalObject)}e[e.length-1].value=n}},Lt.prototype.stepIfStatement=Lt.prototype.stepConditionalExpression,Lt.prototype.stepLabeledStatement=function(e,t,r){e.pop();var n=t.labels||[];n.push(r.label.name);var o=new Lt.State(r.body,t.scope);return o.labels=n,o},Lt.prototype.stepLiteral=function(e,t,r){e.pop();var n=r.value;if(n instanceof RegExp){var o=this.createObjectProto(this.REGEXP_PROTO);this.populateRegExp(o,n),n=o}e[e.length-1].value=n},Lt.prototype.stepLogicalExpression=function(e,t,r){if("&&"!==r.operator&&"||"!==r.operator)throw SyntaxError("Unknown logical operator: "+r.operator);if(!t.doneLeft_)return t.doneLeft_=!0,new Lt.State(r.left,t.scope);if(t.doneRight_)e.pop(),e[e.length-1].value=t.value;else{if(!("&&"===r.operator&&!t.value||"||"===r.operator&&t.value))return t.doneRight_=!0,new Lt.State(r.right,t.scope);e.pop(),e[e.length-1].value=t.value}},Lt.prototype.stepMemberExpression=function(e,t,r){if(!t.doneObject_)return t.doneObject_=!0,new Lt.State(r.object,t.scope);var n;if(r.computed){if(!t.doneProperty_)return t.object_=t.value,t.doneProperty_=!0,new Lt.State(r.property,t.scope);n=t.value}else t.object_=t.value,n=r.property.name;if(e.pop(),t.components)e[e.length-1].value=[t.object_,n];else{var o=this.getProperty(t.object_,n);if(this.getterStep_){var i=o;return this.createGetter_(i,t.object_)}e[e.length-1].value=o}},Lt.prototype.stepNewExpression=Lt.prototype.stepCallExpression,Lt.prototype.stepObjectExpression=function(e,t,r){var n=t.n_||0,o=r.properties[n];if(t.object_){var i=t.destinationName;t.properties_[i]||(t.properties_[i]={}),t.properties_[i][o.kind]=t.value,t.n_=++n,o=r.properties[n]}else t.object_=this.createObjectProto(this.OBJECT_PROTO),t.properties_=Object.create(null);if(o){if("Identifier"===(a=o.key).type)i=a.name;else{if("Literal"!==a.type)throw SyntaxError("Unknown object structure: "+a.type);i=a.value}return t.destinationName=i,new Lt.State(o.value,t.scope)}for(var a in t.properties_){var s=t.properties_[a];if("get"in s||"set"in s){var c={configurable:!0,enumerable:!0,get:s.get,set:s.set};this.setProperty(t.object_,a,Lt.VALUE_IN_DESCRIPTOR,c)}else this.setProperty(t.object_,a,s.init)}e.pop(),e[e.length-1].value=t.object_},Lt.prototype.stepProgram=function(e,t,r){var n=r.body.shift();if(n)return t.done=!1,new Lt.State(n,t.scope);t.done=!0},Lt.prototype.stepReturnStatement=function(e,t,r){if(r.argument&&!t.done_)return t.done_=!0,new Lt.State(r.argument,t.scope);this.unwind(Lt.Completion.RETURN,t.value,void 0)},Lt.prototype.stepSequenceExpression=function(e,t,r){var n=t.n_||0,o=r.expressions[n];if(o)return t.n_=n+1,new Lt.State(o,t.scope);e.pop(),e[e.length-1].value=t.value},Lt.prototype.stepSwitchStatement=function(e,t,r){if(!t.test_)return t.test_=1,new Lt.State(r.discriminant,t.scope);for(1===t.test_&&(t.test_=2,t.switchValue_=t.value,t.defaultCase_=-1);;){var n=t.index_||0,o=r.cases[n];if(t.matched_||!o||o.test)if(o||t.matched_||-1===t.defaultCase_){if(!o)return void e.pop();if(!t.matched_&&!t.tested_&&o.test)return t.tested_=!0,new Lt.State(o.test,t.scope);if(t.matched_||t.value===t.switchValue_){t.matched_=!0;var i=t.n_||0;if(o.consequent[i])return t.isSwitch=!0,t.n_=i+1,new Lt.State(o.consequent[i],t.scope)}t.tested_=!1,t.n_=0,t.index_=n+1}else t.matched_=!0,t.index_=t.defaultCase_;else t.defaultCase_=n,t.index_=n+1}},Lt.prototype.stepThisExpression=function(e,t,r){e.pop(),e[e.length-1].value=this.getValueFromScope("this")},Lt.prototype.stepThrowStatement=function(e,t,r){if(!t.done_)return t.done_=!0,new Lt.State(r.argument,t.scope);this.throwException(t.value)},Lt.prototype.stepTryStatement=function(e,t,r){if(!t.doneBlock_)return t.doneBlock_=!0,new Lt.State(r.block,t.scope);if(t.cv&&t.cv.type===Lt.Completion.THROW&&!t.doneHandler_&&r.handler){t.doneHandler_=!0;var n=new Lt.State(r.handler,t.scope);return n.throwValue=t.cv.value,t.cv=void 0,n}if(!t.doneFinalizer_&&r.finalizer)return t.doneFinalizer_=!0,new Lt.State(r.finalizer,t.scope);e.pop(),t.cv&&this.unwind(t.cv.type,t.cv.value,t.cv.label)},Lt.prototype.stepUnaryExpression=function(e,t,r){if(!t.done_){t.done_=!0;var n=new Lt.State(r.argument,t.scope);return n.components="delete"===r.operator,n}e.pop();var o=t.value;if("-"===r.operator)o=-o;else if("+"===r.operator)o=+o;else if("!"===r.operator)o=!o;else if("~"===r.operator)o=~o;else if("delete"===r.operator){var i=!0;if(Array.isArray(o)){var a=o[0];a===Lt.SCOPE_REFERENCE&&(a=t.scope);var s=String(o[1]);try{delete a.properties[s]}catch(e){t.scope.strict?this.throwException(this.TYPE_ERROR,"Cannot delete property '"+s+"' of '"+a+"'"):i=!1}}o=i}else if("typeof"===r.operator)o=o&&"Function"===o.class?"function":typeof o;else{if("void"!==r.operator)throw SyntaxError("Unknown unary operator: "+r.operator);o=void 0}e[e.length-1].value=o},Lt.prototype.stepUpdateExpression=function(e,t,r){if(!t.doneLeft_){t.doneLeft_=!0;var n=new Lt.State(r.argument,t.scope);return n.components=!0,n}if(t.leftSide_||(t.leftSide_=t.value),t.doneGetter_&&(t.leftValue_=t.value),!t.doneGetter_){var o=this.getValue(t.leftSide_);if(t.leftValue_=o,this.getterStep_){t.doneGetter_=!0;var i=o;return this.createGetter_(i,t.leftSide_)}}if(t.doneSetter_)return e.pop(),void(e[e.length-1].value=t.setterValue_);var a;if(o=Number(t.leftValue_),"++"===r.operator)a=o+1;else{if("--"!==r.operator)throw SyntaxError("Unknown update expression: "+r.operator);a=o-1}var s=r.prefix?a:o,c=this.setValue(t.leftSide_,a);if(c)return t.doneSetter_=!0,t.setterValue_=s,this.createSetter_(c,t.leftSide_,a);e.pop(),e[e.length-1].value=s},Lt.prototype.stepVariableDeclaration=function(e,t,r){var n=r.declarations,o=t.n_||0,i=n[o];for(t.init_&&i&&(this.setValueToScope(i.id.name,t.value),t.init_=!1,i=n[++o]);i;){if(i.init)return t.n_=o,t.init_=!0,t.destinationName=i.id.name,new Lt.State(i.init,t.scope);i=n[++o]}e.pop()},Lt.prototype.stepWithStatement=function(e,t,r){if(!t.doneObject_)return t.doneObject_=!0,new Lt.State(r.object,t.scope);if(!t.doneBody_){t.doneBody_=!0;var n=this.createSpecialScope(t.scope,t.value);return new Lt.State(r.body,n)}e.pop()},Lt.prototype.stepWhileStatement=Lt.prototype.stepDoWhileStatement,Lt.prototype.step=Lt.prototype.step,Lt.prototype.run=Lt.prototype.run,Lt.prototype.appendCode=Lt.prototype.appendCode,Lt.prototype.createObject=Lt.prototype.createObject,Lt.prototype.createObjectProto=Lt.prototype.createObjectProto,Lt.prototype.createAsyncFunction=Lt.prototype.createAsyncFunction,Lt.prototype.createNativeFunction=Lt.prototype.createNativeFunction,Lt.prototype.getProperty=Lt.prototype.getProperty,Lt.prototype.setProperty=Lt.prototype.setProperty,Lt.prototype.nativeToPseudo=Lt.prototype.nativeToPseudo,Lt.prototype.pseudoToNative=Lt.prototype.pseudoToNative,Lt.prototype.callFunction=Lt.prototype.callFunction,Lt.prototype.queueFunction=Lt.prototype.queueFunction,Lt.prototype.createThrowable=Lt.prototype.createThrowable;var Dt=[],Bt=0,Mt=[{key:"timeout",value:'setTimeout(\n   function(){\n      log("later");\n   },\n   1000\n);'},{key:"callA",value:"callA(function(a){\n    log(a);\n}, function(e) {\n    log(e);\n});"},{key:"callF",value:"callF(function(a, b){\n    log(a);\n    log(b);\n});"},{key:"require",value:'var foo = "hi";\nvar doer = require("doer");\nvar get = require("get");\nvar defer = require("defer");\nvar log = require("log");\ndefer(function(){\n    defer(function(){\n        log(get());\n        doer()();\n    });\n});'}],Gt=function(e,t){t.value=t.value+"\n"+e};document.addEventListener("DOMContentLoaded",(function(){var e=document.getElementById("code"),t=document.getElementById("log");if(null!==e&&null!==t){e.addEventListener("input",(function(){t.value=""}));var r=document.getElementById("preset");null!==r&&(Mt.forEach((function(e){r.options[r.options.length]=new Option(e.key,e.value)})),r.addEventListener("change",(function(){t.value="",e.value=this.value}))),document.addEventListener("click",(function(r){r.target.matches(".run-button")&&(r.preventDefault(),function(e,t){t.value="Started",new Lt(e,(function(e,r){e.setProperty(r,"callA",e.createNativeFunction((function(t,r){setTimeout((function(){try{e.queueFunction(t,void 0,"script done"),e.run()}catch(r){e.queueFunction(t,void 0,r),e.run()}}),100)}))),e.setProperty(r,"callF",e.createNativeFunction((function(t,r){return e.callFunction(t,void 0,"sdasd","dsdsd")}))),e.setProperty(r,"log",e.nativeToPseudo((function(e){Gt(e,t)}))),e.setProperty(r,"setTimeout",e.createNativeFunction((function(t,r){var n=++Bt;return Dt[n]=setTimeout((function(){Dt[n]&&(delete Dt[n],e.queueFunction(t),e.run())}),r),n}))),e.setProperty(r,"clearTimeout",e.createNativeFunction((function(e){clearTimeout(Dt[e]),delete Dt[e]}))),e.setProperty(r,"require",e.createNativeFunction((function(r){switch(r){case"doer":return e.createNativeFunction((function(){return e.createNativeFunction((function(){return Gt("bla bla",t)}))}));case"get":return e.createNativeFunction((function(){return e.nativeToPseudo("hi")}));case"log":return e.createNativeFunction((function(e){Gt(e,t)}));case"defer":return e.createNativeFunction((function(t){setTimeout((function(){e.queueFunction(t,void 0),e.run()}),100)}))}})))})).runAll((function(e){return Gt("Some error: ".concat(e),t)}),(function(){return Gt("Finished",t)}))}(e.value,t))}),!1)}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,